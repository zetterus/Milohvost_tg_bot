# handlers/user.py
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from aiogram.filters import Command, CommandStart # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Command –∏ CommandStart

from database import add_order, get_order_by_id, get_user_orders, update_order_delivery_info, update_order_status
from config import ADMIN_IDS

user_router = Router()

class UserOrderState(StatesGroup):
    waiting_for_order_text = State() # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    confirm_order = State() # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
    waiting_for_full_name = State() # –û–∂–∏–¥–∞–Ω–∏–µ –§–ò–û
    waiting_for_address = State()   # –û–∂–∏–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    waiting_for_payment_method = State() # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    waiting_for_phone = State() # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    waiting_for_notes = State() # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π

@user_router.message(CommandStart())
@user_router.message(Command(commands=["help"]))
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑."""
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤. –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å.")
    await message.bot.set_my_commands([
        types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        types.BotCommand(command="help", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
        types.BotCommand(command="myorders", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã")
    ])

@user_router.message(Command(commands=["myorders"]))
async def show_user_orders(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –µ–≥–æ –∑–∞–∫–∞–∑–æ–≤."""
    user_id = message.from_user.id
    orders = get_user_orders(user_id)

    if not orders:
        await message.reply("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    response = "<b>–¢–≤–æ–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    for order in orders:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ–ª—è, –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ, –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        order_id, _, _, order_text, created_at, sent_at, received_at, status, \
        full_name, delivery_address, payment_method, contact_phone, delivery_notes = order

        truncated_text = (order_text[:50] + '...') if len(order_text) > 50 else order_text
        formatted_created_at = datetime.fromisoformat(created_at).strftime('%d.%m.%Y %H:%M')

        # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        delivery_info_str = ""
        if full_name: delivery_info_str += f"   –§–ò–û: {full_name}\n"
        if delivery_address: delivery_info_str += f"   –ê–¥—Ä–µ—Å: {delivery_address}\n"
        if payment_method: delivery_info_str += f"   –û–ø–ª–∞—Ç–∞: {payment_method}\n"
        if contact_phone: delivery_info_str += f"   –¢–µ–ª–µ—Ñ–æ–Ω: {contact_phone}\n"
        if delivery_notes: delivery_info_str += f"   –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {delivery_notes}\n"


        response += (f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n"
                     f"   –¢–µ–∫—Å—Ç: {truncated_text}\n"
                     f"   –°–æ–∑–¥–∞–Ω: {formatted_created_at}\n"
                     f"   –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n")
        if delivery_info_str:
            response += f"--- –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ ---\n{delivery_info_str}"
        response += "\n" # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
    await message.reply(response, parse_mode='HTML')


@user_router.message(F.text & ~F.text.startswith('/'))
async def handle_new_order(message: types.Message, state: FSMContext):
    """
    –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å.
    """
    user_id = message.from_user.id
    username = message.from_user.full_name or message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    order_text = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ FSM context, –Ω–æ –ø–æ–∫–∞ –Ω–µ –≤ –±–∞–∑—É
    await state.update_data(user_id=user_id, username=username, order_text=order_text)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
    ])
    await message.reply(f"–¢—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å: \n\n<b>{order_text}</b>\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å?",
                        reply_markup=markup, parse_mode='HTML')
    await state.set_state(UserOrderState.confirm_order) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ ---
@user_router.callback_query(F.data == "confirm_order", UserOrderState.confirm_order)
async def process_confirm_order(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    order_text = user_data.get('order_text')
    user_id = user_data.get('user_id')
    username = user_data.get('username')

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø–æ–∫–∞ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏
    order_id = add_order(user_id, username, order_text)
    await state.update_data(order_id=order_id) # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ FSM context

    await callback_query.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n"
                                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:")
    await state.set_state(UserOrderState.waiting_for_full_name) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –§–ò–û
    await callback_query.answer() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

@user_router.callback_query(F.data == "cancel_order", UserOrderState.confirm_order)
async def process_cancel_order(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear() # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ FSM
    await callback_query.message.edit_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await callback_query.answer()

# --- –®–∞–≥–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ ---

@user_router.message(UserOrderState.waiting_for_full_name, F.text)
async def process_full_name(message: types.Message, state: FSMContext):
    full_name = message.text.strip()
    await state.update_data(full_name=full_name)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data="next_step_address")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order_delivery")]
    ])
    await message.reply(f"–¢–≤–æ–µ –§–ò–û: <b>{full_name}</b>\n\n–í–µ—Ä–Ω–æ? –ñ–º–∏ '–î–∞–ª–µ–µ' –∏–ª–∏ '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'.", parse_mode='HTML', reply_markup=markup)
    await state.set_state(UserOrderState.waiting_for_address) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–∞–¥—Ä–µ—Å–∞

@user_router.callback_query(F.data == "next_step_address", UserOrderState.waiting_for_address)
async def request_address(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –≥–æ—Ä–æ–¥, –∏–Ω–¥–µ–∫—Å):")
    await callback_query.answer() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ waiting_for_address –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–æ–º, –Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    await state.set_state(UserOrderState.waiting_for_address)


@user_router.message(UserOrderState.waiting_for_address, F.text)
async def process_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    await state.update_data(delivery_address=address)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data="next_step_payment_method")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order_delivery")]
    ])
    await message.reply(f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{address}</b>\n\n–í–µ—Ä–Ω–æ?", parse_mode='HTML', reply_markup=markup)
    await state.set_state(UserOrderState.waiting_for_payment_method)


@user_router.callback_query(F.data == "next_step_payment_method", UserOrderState.waiting_for_payment_method)
async def request_payment_method(callback_query: types.CallbackQuery, state: FSMContext):
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏", callback_data="payment_–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏")],
        [types.InlineKeyboardButton(text="üí≥ –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ (–ø–æ –∑–∞–ø—Ä–æ—Å—É)", callback_data="payment_–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order_delivery")]
    ])
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
    await callback_query.answer()
    await state.set_state(UserOrderState.waiting_for_payment_method)


@user_router.callback_query(F.data.startswith("payment_"), UserOrderState.waiting_for_payment_method)
async def process_payment_method_callback(callback_query: types.CallbackQuery, state: FSMContext):
    payment_method = callback_query.data.split('_', 1)[1] # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ 'payment_'
    await state.update_data(payment_method=payment_method)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data="next_step_phone")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order_delivery")]
    ])
    await callback_query.message.edit_text(f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>{payment_method}</b>\n\n–í–µ—Ä–Ω–æ?", parse_mode='HTML', reply_markup=markup)
    await callback_query.answer()
    await state.set_state(UserOrderState.waiting_for_phone) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞


@user_router.callback_query(F.data == "next_step_phone", UserOrderState.waiting_for_phone)
async def request_phone(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await callback_query.answer()
    await state.set_state(UserOrderState.waiting_for_phone)


@user_router.message(UserOrderState.waiting_for_phone, F.text)
async def process_phone(message: types.Message, state: FSMContext):
    contact_phone = message.text.strip()
    await state.update_data(contact_phone=contact_phone)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –î–∞–ª–µ–µ", callback_data="next_step_notes")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order_delivery")]
    ])
    await message.reply(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: <b>{contact_phone}</b>\n\n–í–µ—Ä–Ω–æ?", parse_mode='HTML', reply_markup=markup)
    await state.set_state(UserOrderState.waiting_for_notes)


@user_router.callback_query(F.data == "next_step_notes", UserOrderState.waiting_for_notes)
async def request_notes(callback_query: types.CallbackQuery, state: FSMContext):
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="finish_order")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order_delivery")]
    ])
    await callback_query.message.edit_text("–ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –¥–æ—Å—Ç–∞–≤–∫–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–æ–º–æ—Ñ–æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø–æ–∑–≤–æ–Ω–∏—Ç—å –∑–∞—Ä–∞–Ω–µ–µ')\n\n–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=markup)
    await callback_query.answer()
    await state.set_state(UserOrderState.waiting_for_notes)


@user_router.message(UserOrderState.waiting_for_notes, F.text)
async def process_notes(message: types.Message, state: FSMContext):
    delivery_notes = message.text.strip()
    await state.update_data(delivery_notes=delivery_notes)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="finish_order")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order_delivery")]
    ])
    await message.reply(f"–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: <b>{delivery_notes}</b>\n\n–í–µ—Ä–Ω–æ? –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ'.", parse_mode='HTML', reply_markup=markup)
    await state.set_state(UserOrderState.waiting_for_notes) # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è


@user_router.callback_query(F.data == "finish_order", UserOrderState.waiting_for_notes)
async def finalize_order(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    order_id = user_data.get('order_id')

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
    update_order_delivery_info(
        order_id,
        full_name=user_data.get('full_name'),
        delivery_address=user_data.get('delivery_address'),
        payment_method=user_data.get('payment_method'),
        contact_phone=user_data.get('contact_phone'),
        delivery_notes=user_data.get('delivery_notes')
    )

    await callback_query.message.edit_text(f"üöÄ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç!\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å –ø–æ–ª–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
    order = get_order_by_id(order_id) # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if order:
        order_id, user_id, username, order_text, created_at_iso, sent_at_iso, received_at_iso, status, \
        full_name, delivery_address, payment_method, contact_phone, delivery_notes = order

        created_at_dt = datetime.fromisoformat(created_at_iso)
        formatted_created_at = created_at_dt.strftime('%d.%m.%Y %H:%M')

        admin_message = (f"üéâ <b>–ù–û–í–´–ô –û–§–û–†–ú–õ–ï–ù–ù–´–ô –ó–ê–ö–ê–ó ‚Ññ{order_id}</b>\n\n"
                         f"üë§ –û—Ç: {username} (ID: <code>{user_id}</code>)\n"
                         f"üìù –¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞: {order_text}\n"
                         f"‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {formatted_created_at}\n"
                         f"–°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n"
                         f"--- –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ ---\n"
                         f"–§–ò–û: {full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                         f"–ê–¥—Ä–µ—Å: {delivery_address or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                         f"–û–ø–ª–∞—Ç–∞: {payment_method or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                         f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                         f"–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {delivery_notes or '–ù–µ—Ç'}")

        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ/–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"admin_view_order_{order_id}")],
            [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_status_–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è_{order_id}")]
        ])

        for admin_id in ADMIN_IDS:
            try:
                await callback_query.bot.send_message(admin_id, admin_message, reply_markup=markup, parse_mode='HTML')
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    else:
        print(f"–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")

    await state.clear() # –û—á–∏—â–∞–µ–º FSM –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await callback_query.answer()


@user_router.callback_query(F.data == "cancel_order_delivery")
async def cancel_order_delivery(callback_query: types.CallbackQuery, state: FSMContext):
    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î, –º—ã –º–æ–∂–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å.
    # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º FSM –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    # –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª—è—Ç—å –∏–∑ –ë–î, –¥–æ–±–∞–≤—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ database.py
    # –∏–ª–∏ –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "–û—Ç–º–µ–Ω–µ–Ω".
    user_data = await state.get_data()
    order_id = user_data.get('order_id')
    if order_id:
        # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–û—Ç–º–µ–Ω–µ–Ω" –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω
        update_order_status(order_id, "–û—Ç–º–µ–Ω–µ–Ω")
        await callback_query.message.edit_text(f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        await callback_query.message.edit_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    await state.clear()
    await callback_query.answer()

# --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞) ---
@user_router.message(F.text, UserOrderState) # –õ–æ–≤–∏–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª—é–±–æ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏
async def handle_unexpected_text_during_fsm(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ FSM, –Ω–æ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞
        if current_state != UserOrderState.waiting_for_order_text:
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="cancel_order_delivery")]
            ])
            await message.reply("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
                                f"–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {current_state.split(':')[-1]}\n\n"
                                "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.", reply_markup=markup)
            return
    # –ï—Å–ª–∏ —ç—Ç–æ waiting_for_order_text, —Ç–æ —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç handle_new_order
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ FSM, –æ–Ω–æ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ —ç—Ç–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–æ–º
