# handlers/user.py
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

# --- –ù–û–í–´–ô –ò–ú–ü–û–†–¢ –î–õ–Ø –§–ò–õ–¨–¢–†–û–í ---
from aiogram.filters import Command, CommandStart # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Command –∏ CommandStart

from database import add_order, get_order_by_id, get_user_orders
from config import ADMIN_IDS

user_router = Router()

class UserOrderState(StatesGroup):
    waiting_for_order_text = State()

@user_router.message(CommandStart()) # –ò—Å–ø–æ–ª—å–∑—É–µ–º CommandStart() –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@user_router.message(Command(commands=["help"])) # –ò—Å–ø–æ–ª—å–∑—É–µ–º Command() –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑."""
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤. –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å.")
    await message.bot.set_my_commands([
        types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        types.BotCommand(command="help", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
        types.BotCommand(command="myorders", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã")
    ])

@user_router.message(Command(commands=["myorders"])) # –ò—Å–ø–æ–ª—å–∑—É–µ–º Command() –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /myorders
async def show_user_orders(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –µ–≥–æ –∑–∞–∫–∞–∑–æ–≤."""
    user_id = message.from_user.id
    orders = get_user_orders(user_id)

    if not orders:
        await message.reply("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    response = "<b>–¢–≤–æ–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    for order in orders:
        order_id, _, _, order_text, created_at, sent_at, received_at, status = order
        truncated_text = (order_text[:50] + '...') if len(order_text) > 50 else order_text
        response += (f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n"
                     f"   –¢–µ–∫—Å—Ç: {truncated_text}\n"
                     f"   –°–æ–∑–¥–∞–Ω: {datetime.fromisoformat(created_at).strftime('%d.%m.%Y %H:%M')}\n"
                     f"   –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n")
    await message.reply(response, parse_mode='HTML')

@user_router.message(F.text & ~F.text.startswith('/'))
async def handle_new_order(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –∫–∞–∫ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑."""

    user_id = message.from_user.id
    username = message.from_user.full_name or message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    order_text = message.text

    order_id = add_order(user_id, username, order_text)

    await message.reply(f"–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –∑–∞–∫–∞–∑ ‚Ññ{order_id} –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    for admin_id in ADMIN_IDS:
        try:
            current_order_data = get_order_by_id(order_id)
            if not current_order_data:
                print(f"–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
                continue

            created_at_dt = datetime.fromisoformat(current_order_data[4])
            formatted_created_at = created_at_dt.strftime('%d.%m.%Y %H:%M')

            admin_message = (f"üéâ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id}</b>\n\n"
                             f"üë§ –û—Ç: {username} (ID: {user_id})\n"
                             f"üìù –¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞: {order_text}\n"
                             f"‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {formatted_created_at}\n"
                             f"–°—Ç–∞—Ç—É—Å: –ù–æ–≤—ã–π")

            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ/–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"admin_view_order_{order_id}")],
                [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_status_–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è_{order_id}")]
            ])
            await message.bot.send_message(admin_id, admin_message, reply_markup=markup, parse_mode='HTML')
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
