# handlers/admin_handlers.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

import logging

from config import ADMIN_IDS  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
from db import get_all_orders
from models import Order, HelpMessage # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–ª–±—ç–∫–æ–≤ –∞–¥–º–∏–Ω–æ–≤
admin_router = Router()


class AdminHandlers:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """

    @admin_router.message(Command("admin"))
    async def admin_command(message: Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º, –∏ –µ—Å–ª–∏ –¥–∞,
        –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é.
        """
        if message.from_user.id not in ADMIN_IDS:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç –Ω–µ–∞–¥–º–∏–Ω–∞: {message.from_user.id}")
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã üìã", callback_data="admin_view_all_orders")
        keyboard.button(text="–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã üîç", callback_data="admin_find_orders")
        keyboard.button(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–º–æ—â—å—é üí¨", callback_data="admin_manage_help_messages")
        keyboard.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥

        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard.as_markup()
        )

    @admin_router.callback_query(F.data == "admin_view_all_orders")
    async def admin_view_all_orders_callback(callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã".
        """
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã.")

        orders_text = "–í—Å–µ –∑–∞–∫–∞–∑—ã:\n\n"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ db.py –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        orders = await get_all_orders(limit=10)  # <-- –ò–ó–ú–ï–ù–ï–ù–û

        if orders:
            for order in orders:
                orders_text += (
                    f"ID: {order.id}\n"
                    f"–û—Ç: {order.username or 'N/A'} ({order.user_id})\n"
                    f"–¢–µ–∫—Å—Ç: {order.order_text[:50]}...\n"
                    f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
                    f"–°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
                    "--------------------------\n"
                )
        else:
            orders_text = "–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."

        await callback.message.edit_text(orders_text)
        await callback.answer()

    @admin_router.callback_query(F.data == "admin_find_orders")
    async def admin_find_orders_callback(callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã".
        """
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞–∂–∞–ª '–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã'.")
        await callback.message.edit_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤. –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        await callback.answer()

    @admin_router.callback_query(F.data == "admin_manage_help_messages")
    async def admin_manage_help_messages_callback(callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–º–æ—â—å—é".
        """
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞–∂–∞–ª '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–º–æ—â—å—é'.")
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–°–æ–∑–¥–∞—Ç—å/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úèÔ∏è", callback_data="admin_create_edit_help")
        keyboard.button(text="–í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úÖ", callback_data="admin_select_active_help")
        keyboard.button(text="–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üîô", callback_data="admin_panel_back")
        keyboard.adjust(1)

        await callback.message.edit_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–º–æ—â–∏:",
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()

    # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏

    @admin_router.callback_query(F.data == "admin_panel_back")
    async def admin_panel_back_callback(callback: CallbackQuery):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
        """
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        await AdminHandlers.admin_command(callback.message)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        await callback.answer()