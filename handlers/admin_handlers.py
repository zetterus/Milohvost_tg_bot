# handlers/admin_handlers.py
import logging

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.markdown import hbold, hcode, hlink, hitalic
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ORDERS_PER_PAGE –∏ MAX_PREVIEW_TEXT_LENGTH —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ config
from config import ADMIN_IDS, ORDER_STATUS_MAP, ORDERS_PER_PAGE, MAX_PREVIEW_TEXT_LENGTH
from db import get_all_orders, get_order_by_id, update_order_status, search_orders
from models import Order, HelpMessage


# –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ states.py –µ—â–µ –Ω–µ—Ç:
class AdminStates(StatesGroup):
    waiting_for_search_query = State()


logger = logging.getLogger(__name__)

admin_router = Router()


class AdminHandlers:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """

    # --- –ê–î–ú–ò–ù–°–ö–û–ï –ú–ï–ù–Æ ---
    @staticmethod
    async def _display_admin_main_menu(update_object: Message | CallbackQuery):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç Message –∏–ª–∏ CallbackQuery –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        user_id = update_object.from_user.id

        if user_id not in ADMIN_IDS:
            if isinstance(update_object, Message):
                await update_object.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            elif isinstance(update_object, CallbackQuery):
                await update_object.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
            return

        logger.info(f"–ê–¥–º–∏–Ω {user_id} –≤–æ—à–µ–ª/–≤–µ—Ä–Ω—É–ª—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã üìã", callback_data="admin_orders_page_1")
        keyboard.button(text="–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã üîç", callback_data="admin_find_orders")
        keyboard.button(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–º–æ—â—å—é üí¨", callback_data="admin_manage_help_messages")
        keyboard.adjust(1)  # –ö–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü

        text = hbold("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        reply_markup = keyboard.as_markup()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
        if isinstance(update_object, Message):
            await update_object.answer(
                text,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        elif isinstance(update_object, CallbackQuery):
            await update_object.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
            await update_object.message.edit_text(  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                text,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )

    @admin_router.message(Command("admin"))
    async def admin_command(message: Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
        """
        await AdminHandlers._display_admin_main_menu(message)

    @admin_router.callback_query(F.data == "admin_panel_back")
    async def admin_panel_callbacks(callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–∑ –ø–æ–¥–º–µ–Ω—é ("admin_panel_back").
        """
        await AdminHandlers._display_admin_main_menu(callback)

    # --- –û–¢–û–ë–†–ê–ñ–ï–ù–ò –°–¢–†–ê–ù–ò–¶–´ –°–û –í–°–ï–ú –ó–ê–ö–ê–ó–ê–ú–ò/–†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò –ü–û–ò–°–ö–ê ---
    @staticmethod
    async def _get_paginated_orders_menu(
            orders: list[Order],
            current_page: int,
            total_orders: int,
            message_context: str = "–≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤",  # "–≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤" –∏–ª–∏ "–ø–æ–∏—Å–∫–∞"
            query: str = None  # –î–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∏—Å–∫–∞
    ):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.

        :param orders: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Order, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        :param current_page: –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1).
        :param total_orders: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤.
        :param message_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤", "–ø–æ–∏—Å–∫–∞").
        :param query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –µ—Å—Ç—å.
        :return: –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, InlineKeyboardBuilder)
        """
        total_pages = (total_orders + ORDERS_PER_PAGE - 1) // ORDERS_PER_PAGE

        # --- –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ---
        if query:
            header_text = hbold(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}):")
        else:
            header_text = hbold(f"–°–ø–∏—Å–æ–∫ {message_context} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}):")

        orders_text = header_text + "\n\n"

        if not orders:
            orders_text += "–ó–∞–∫–∞–∑–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç."

        # --- –ö–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–æ–≤ ---
        order_buttons_builder = InlineKeyboardBuilder()
        for order in orders:
            display_status = ORDER_STATUS_MAP.get(order.status, order.status)

            # –ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞, –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
            preview_text = order.order_text[:MAX_PREVIEW_TEXT_LENGTH]
            if len(order.order_text) > MAX_PREVIEW_TEXT_LENGTH:
                preview_text += "..."

            button_text = f"#{order.id} | {preview_text} | {display_status}"
            order_buttons_builder.add(InlineKeyboardButton(
                text=button_text,
                callback_data=f"view_order_{order.id}"  # –≠—Ç–æ—Ç callback_data –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º
            ))
        order_buttons_builder.adjust(1)  # –ö–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥

        # --- –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---
        pagination_builder = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∏ "–ù–∞ –ø–µ—Ä–≤—É—é" –∏ "–ù–∞ 5 –Ω–∞–∑–∞–¥"
        if current_page > 1:
            pagination_builder.button(text="‚èÆÔ∏è", callback_data=f"admin_orders_page_{1}")
        if current_page > 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞–∑–∞–¥
            pagination_builder.button(text="‚óÄÔ∏è5", callback_data=f"admin_orders_page_{max(1, current_page - 5)}")
        if current_page > 1:
            pagination_builder.button(text="‚óÄÔ∏è", callback_data=f"admin_orders_page_{current_page - 1}")

        # –ö–Ω–æ–ø–∫–∏ "–ù–∞ 1 –≤–ø–µ—Ä–µ–¥", "–ù–∞ 5 –≤–ø–µ—Ä–µ–¥", "–ù–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é"
        if current_page < total_pages:
            pagination_builder.button(text="‚ñ∂Ô∏è", callback_data=f"admin_orders_page_{current_page + 1}")
        if current_page < total_pages - 4:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –≤–ø–µ—Ä–µ–¥–∏
            pagination_builder.button(text="‚ñ∂Ô∏è5",
                                      callback_data=f"admin_orders_page_{min(total_pages, current_page + 5)}")
        if current_page < total_pages:
            pagination_builder.button(text="‚è≠Ô∏è", callback_data=f"admin_orders_page_{total_pages}")

        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        final_keyboard = InlineKeyboardBuilder()
        final_keyboard.attach(order_buttons_builder)  # –°–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–æ–≤

        if total_orders > ORDERS_PER_PAGE:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            final_keyboard.attach(pagination_builder)  # –ó–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" –≤–Ω–∏–∑—É
        final_keyboard.row(InlineKeyboardButton(
            text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            callback_data="admin_panel_back"
        ))

        return orders_text, final_keyboard.as_markup()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π markup

    @admin_router.callback_query(F.data.startswith("admin_orders_page_"))
    async def admin_view_all_orders_paginated_callback(callback: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∫–∞–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤, —Ç–∞–∫ –∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞).
        """
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try:
            current_page = int(callback.data.split("_")[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ _
        except (ValueError, IndexError):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {callback.data}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", show_alert=True)
            return

        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {current_page}.")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM. –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        data = await state.get_data()
        search_query = data.get("search_query")  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –µ—Å—Ç—å

        if search_query:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∏—â–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –Ω–µ–º—É
            found_orders = await search_orders(search_query)
            total_orders = len(found_orders)
            start_index = (current_page - 1) * ORDERS_PER_PAGE
            end_index = start_index + ORDERS_PER_PAGE
            orders_on_page = found_orders[start_index:end_index]

            orders_text, keyboard_markup = await AdminHandlers._get_paginated_orders_menu(
                orders=orders_on_page,
                current_page=current_page,
                total_orders=total_orders,
                message_context="—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞",  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                query=search_query  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
            all_orders = await get_all_orders()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
            total_orders = len(all_orders)

            # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            start_index = (current_page - 1) * ORDERS_PER_PAGE
            end_index = start_index + ORDERS_PER_PAGE
            orders_on_page = all_orders[start_index:end_index]

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            orders_text, keyboard_markup = await AdminHandlers._get_paginated_orders_menu(
                orders=orders_on_page,
                current_page=current_page,
                total_orders=total_orders,
                message_context="–≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            )

        await callback.message.edit_text(
            orders_text,
            reply_markup=keyboard_markup,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π markup
            parse_mode="HTML"
        )
        await callback.answer()

    @classmethod
    @admin_router.callback_query(F.data.startswith("view_order_"))
    async def admin_view_order_details_callback(callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑ #ID" –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞.
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
        """
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        order_id = int(callback.data.split("_")[2])
        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ID {order_id}.")

        order = await get_order_by_id(order_id)

        if order:
            display_status = ORDER_STATUS_MAP.get(order.status, order.status)
            order_details_text = (
                f"{hbold('–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ')}{hbold(str(order.id))}\n\n"
                f"{hbold('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:')} {hbold(order.username or 'N/A')} ({order.user_id})\n"
                f"{hbold('–°—Ç–∞—Ç—É—Å:')} {hbold(display_status)}\n"
                f"{hbold('–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:')}\n{hcode(order.order_text)}\n"
                f"{hbold('–§–ò–û:')} {order.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"{hbold('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:')} {order.delivery_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"{hbold('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:')} {order.payment_method or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"{hbold('–¢–µ–ª–µ—Ñ–æ–Ω:')} {order.contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"{hbold('–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:')} {order.delivery_notes or '–ù–µ—Ç'}\n"
                f"{hbold('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:')} {order.created_at.strftime('%d.%m.%Y %H:%M:%S')}\n"
            )

            status_keyboard = InlineKeyboardBuilder()
            for status_key, status_value in ORDER_STATUS_MAP.items():
                if status_key != order.status:
                    status_keyboard.add(InlineKeyboardButton(
                        text=f"üîÑ {status_value}",
                        callback_data=f"admin_change_status_{order.id}_{status_key}"  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û
                    ))
            status_keyboard.add(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º",
                callback_data="admin_orders_page_1"  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û
            ))
            status_keyboard.adjust(2)

            await callback.message.edit_text(
                order_details_text,
                reply_markup=status_keyboard.as_markup(),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")

        await callback.answer()

    @admin_router.callback_query(F.data.startswith("admin_change_status_"))  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û
    async def admin_change_order_status_callback(callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
        """
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ callback_data –¥–ª—è admin_change_status_order_id_status_key
        parts = callback.data.split('_')  # –ù–∞–ø—Ä–∏–º–µ—Ä: ['admin', 'change', 'status', '123', 'pending']
        if len(parts) < 5:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 5 —á–∞—Å—Ç–µ–π
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞.", show_alert=True)
            return

        try:
            order_id = int(parts[3])  # ID –∑–∞–∫–∞–∑–∞
            new_status = parts[4]  # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        except (ValueError, IndexError):
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å.", show_alert=True)
            return

        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ID {order_id} –Ω–∞ '{new_status}'.")

        updated_order = await update_order_status(order_id, new_status)

        if updated_order:
            display_status = ORDER_STATUS_MAP.get(updated_order.status, updated_order.status)
            await callback.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{display_status}'!", show_alert=True)

            temp_callback_data = f"view_order_{order_id}"
            temp_callback_query = CallbackQuery(id=callback.id, from_user=callback.from_user, message=callback.message,
                                                data=temp_callback_data)
            await AdminHandlers.admin_view_order_details_callback(temp_callback_query)
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")

    # --- –ü–û–ò–°–ö –ó–ê–ö–ê–ó–û–í ---
    @admin_router.callback_query(F.data == "admin_find_orders")
    async def admin_find_orders_callback(callback: CallbackQuery, state: FSMContext):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã üîç".
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞.
        """
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

        await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"

        await state.set_state(AdminStates.waiting_for_search_query)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞ {callback.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ {await state.get_state()}")

        await callback.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_panel_back")]
            ]),
            parse_mode="HTML"
        )

    @admin_router.message(StateFilter(AdminStates.waiting_for_search_query))
    async def admin_process_search_query(message: Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
        """
        if message.from_user.id not in ADMIN_IDS:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            await state.clear()
            return

        logger.info(
            f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–≤–µ–ª –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{message.text}'. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

        search_query = message.text.strip()

        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞ {message.from_user.id} —Å–±—Ä–æ—à–µ–Ω–æ.")  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        found_orders = await search_orders(search_query)

        if found_orders:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é)
            orders_text, keyboard_markup = await AdminHandlers._get_paginated_orders_menu(
                orders=found_orders,
                current_page=1,  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                total_orders=len(found_orders),
                message_context="—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞",  # –ú–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                query=search_query  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            )
            await message.answer(
                orders_text,
                reply_markup=keyboard_markup,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel_back")]
                ]),
                parse_mode="HTML"
            )

    # --- –†–ê–ë–û–¢–ê –° –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò –ü–û–ú–û–©–ò ---
    @admin_router.callback_query(F.data == "admin_manage_help_messages")
    async def admin_manage_help_messages_callback(callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–º–æ—â—å—é".
        """
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞–∂–∞–ª '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–º–æ—â—å—é'.")
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–°–æ–∑–¥–∞—Ç—å/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úèÔ∏è", callback_data="admin_create_edit_help")
        keyboard.button(text="–í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚úÖ", callback_data="admin_select_active_help")
        keyboard.button(text="–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üîô", callback_data="admin_panel_back")
        keyboard.adjust(1)

        await callback.message.edit_text(
            hbold("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–º–æ—â–∏:"),
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()
