import logging
import re
from typing import Union  # –î–ª—è Type Hinting

from aiogram import Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import (
    Message,
    CallbackQuery,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode  # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç ParseMode

from db import add_new_order
from config import (
    DISPLAY_FIELD_NAMES,
    ORDER_FIELDS_CONFIG,
    ORDER_FIELD_MAP,
    PHONE_NUMBER_REGEX
)
from .user_states import OrderStates
from .user_utils import _display_user_main_menu  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç, –±—ã–ª–æ main_menu

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "make_order")
async def make_order_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑".
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'.")

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è (order_text)
    first_field_config = ORDER_FIELDS_CONFIG[0]

    await callback.message.edit_text(first_field_config["prompt"], parse_mode=ParseMode.MARKDOWN)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è getattr –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏
    await state.set_state(getattr(OrderStates, first_field_config["state_name"]))
    await callback.answer()


@router.message(OrderStates.waiting_for_order_text)
async def process_order_text(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É, –ø–µ—Ä–µ—Ö–æ–¥—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é (full_name).
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞.")
    await state.update_data(order_text=message.text)

    current_field_config = ORDER_FIELD_MAP.get("order_text")
    if not current_field_config:
        logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è 'order_text' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start.",
            parse_mode=ParseMode.HTML  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
        await state.clear()
        return

    next_field_key = current_field_config.get("next_field")
    if not next_field_key:
        logger.error("–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è 'order_text' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"confirm_input:{next_field_key}")
    keyboard.button(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_order")
    keyboard.adjust(2)

    await message.answer(
        f"–¢–≤–æ–π –∑–∞–∫–∞–∑: *{message.text}*\n\n–í—Å—ë –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –∑–∞–∫–∞–∑.",
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.MARKDOWN
    )


@router.callback_query(F.data.startswith("confirm_input:"))
async def confirm_input_and_next(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ORDER_FIELD_MAP –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—è –∏–∑ callback_data. –ü—Ä–∏–º–µ—Ä: "confirm_input:full_name"
    field_to_ask_key = callback.data.split(":")[1]
    user_data = await state.get_data()
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–≤–æ–¥. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è: {field_to_ask_key}. –î–∞–Ω–Ω—ã–µ: {user_data}")

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–≤–æ–¥–∫–∏
    if field_to_ask_key == "final_confirm":
        await _show_order_summary(callback.message, state)
        await callback.answer()
        return

    next_field_config = ORDER_FIELD_MAP.get(field_to_ask_key)

    if not next_field_config:
        logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—è '{field_to_ask_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()
        await callback.answer()
        return

    input_type = next_field_config.get("input_type")
    prompt_text = next_field_config["prompt"]
    state_to_set = getattr(OrderStates, next_field_config["state_name"])

    if input_type == "text":
        await callback.message.edit_text(prompt_text, parse_mode=ParseMode.MARKDOWN)
        await state.set_state(state_to_set)
    elif input_type == "buttons":
        keyboard = InlineKeyboardBuilder()
        for text, data_value in next_field_config["options"].items():
            keyboard.button(text=text, callback_data=f"set_{field_to_ask_key}:{data_value}")
        keyboard.adjust(1)  # –í—Å–µ–≥–¥–∞ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É –¥–ª—è –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        await callback.message.edit_text(
            prompt_text,
            reply_markup=keyboard.as_markup(),
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(state_to_set)
    elif input_type == "contact_button":
        reply_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–Ω–ª–∞–π–Ω-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(
            prompt_text,
            reply_markup=reply_keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(state_to_set)
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–≤–æ–¥–∞ '{input_type}' –¥–ª—è –ø–æ–ª—è '{field_to_ask_key}'.")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()

    await callback.answer()


@router.message(OrderStates.waiting_for_full_name)
async def process_full_name_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
    """
    await state.update_data(full_name=message.text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –ø–æ–ª–Ω–æ–µ –∏–º—è: {message.text}")

    current_field_config = ORDER_FIELD_MAP.get("full_name")
    next_field_key = current_field_config.get("next_field")

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"confirm_input:{next_field_key}")
    keyboard.button(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_order")
    keyboard.adjust(2)

    display_field_name = DISPLAY_FIELD_NAMES.get("full_name", "–ü–æ–ª–Ω–æ–µ –∏–º—è")

    await message.answer(
        f"*{display_field_name.capitalize()}*: *{message.text}*\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(OrderStates.waiting_for_delivery_address)
async def process_delivery_address_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
    """
    await state.update_data(delivery_address=message.text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {message.text}")

    current_field_config = ORDER_FIELD_MAP.get("delivery_address")
    next_field_key = current_field_config.get("next_field")

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"confirm_input:{next_field_key}")
    keyboard.button(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_order")
    keyboard.adjust(2)

    display_field_name = DISPLAY_FIELD_NAMES.get("delivery_address", "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")

    await message.answer(
        f"*{display_field_name.capitalize()}*: *{message.text}*\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(OrderStates.waiting_for_delivery_notes)
async def process_delivery_notes_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –∫ –¥–æ—Å—Ç–∞–≤–∫–µ.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ).
    """
    await state.update_data(delivery_notes=message.text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –¥–æ—Å—Ç–∞–≤–∫–µ: {message.text}")

    current_field_config = ORDER_FIELD_MAP.get("delivery_notes")
    next_field_key = current_field_config.get("next_field")  # –û–∂–∏–¥–∞–µ—Ç—Å—è "final_confirm"

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"confirm_input:{next_field_key}")
    keyboard.button(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_order")
    keyboard.adjust(2)

    display_field_name = DISPLAY_FIELD_NAMES.get("delivery_notes", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –¥–æ—Å—Ç–∞–≤–∫–µ")

    await message.answer(
        f"*{display_field_name.capitalize()}*: *{message.text}*\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.MARKDOWN
    )


@router.message(OrderStates.waiting_for_contact_phone)
async def process_contact_phone(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥, —Ç–∞–∫ –∏ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
    """
    contact_phone = None

    if message.contact:
        contact_phone = message.contact.phone_number
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {contact_phone}")
    elif message.text:
        # –£–¥–∞–ª—è–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é
        await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä...", reply_markup=ReplyKeyboardRemove())
        if re.fullmatch(PHONE_NUMBER_REGEX, message.text):
            contact_phone = message.text
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é: {contact_phone}")
        else:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +380XXXXXXXXX –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                ),
                parse_mode=ParseMode.MARKDOWN
            )
            return  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∂–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥

    if contact_phone:
        await state.update_data(contact_phone=contact_phone)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞, –Ω–æ –±–µ–∑ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        # ReplyKeyboardRemove() —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—ã—à–µ, –µ—Å–ª–∏ –±—ã–ª —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.
        # –ï—Å–ª–∏ –±—ã–ª contact-button, —Ç–æ –æ–Ω–∞ —Å–∞–º–∞ –∏—Å—á–µ–∑–Ω–µ—Ç.
        await message.answer(
            f"–¢–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: *{contact_phone}*\n\n–í—Å—ë –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –∑–∞–∫–∞–∑.",
            parse_mode=ParseMode.MARKDOWN
        )

        # –ó–∞—Ç–µ–º, –≤ –û–¢–î–ï–õ–¨–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å Inline-–∫–Ω–æ–ø–∫–∞–º–∏
        next_field_config = ORDER_FIELD_MAP["contact_phone"]
        next_field_key = next_field_config.get("next_field")

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"confirm_input:{next_field_key}")
        keyboard.button(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_order")
        keyboard.adjust(2)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        # –ï—Å–ª–∏ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º, —Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤–≤–æ–¥, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.edit_reply_markup(reply_markup=keyboard.as_markup())
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ReplyMarkup –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
            await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å:", reply_markup=keyboard.as_markup(),
                                 parse_mode=ParseMode.MARKDOWN)

    # else: –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, —Ç–∞–∫ –∫–∞–∫ `return` —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—à–µ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ.


@router.callback_query(F.data.startswith("set_payment_method:"))
async def set_payment_method(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    payment_method = callback.data.split(":")[1]
    await state.update_data(payment_method=payment_method)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}")

    next_field_config_after_payment = ORDER_FIELD_MAP["payment_method"]
    next_field_key_after_payment = next_field_config_after_payment.get("next_field")
    contact_phone_config = ORDER_FIELD_MAP.get(next_field_key_after_payment)

    if not contact_phone_config:
        logger.error(
            f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—è '{next_field_key_after_payment}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã.")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()
        await callback.answer()
        return

    reply_keyboard_for_phone = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    await callback.message.answer(
        f"–¢—ã –≤—ã–±—Ä–∞–ª —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: *{payment_method}*.\n\n" + contact_phone_config["prompt"],
        reply_markup=reply_keyboard_for_phone,
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(getattr(OrderStates, contact_phone_config["state_name"]))
    await callback.answer()


@router.callback_query(F.data == "cancel_order")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –Ω–∞ –ª—é–±–æ–π —Å—Ç–∞–¥–∏–∏.
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑.")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è —É–±—Ä–∞—Ç—å Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞
    await callback.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    await state.clear()
    await _display_user_main_menu(callback, state)
    await callback.answer()


async def _show_order_summary(update_object: Union[Message, CallbackQuery], state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç Message –∏–ª–∏ CallbackQuery –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    user_data = await state.get_data()

    order_summary_parts = []
    for field_config in ORDER_FIELDS_CONFIG:
        key = field_config["key"]
        display_name = DISPLAY_FIELD_NAMES.get(key, key.replace('_', ' '))
        value = user_data.get(key)

        if value:
            order_summary_parts.append(f"*{display_name.capitalize()}*: {value}")
        elif key == 'delivery_notes':
            order_summary_parts.append(f"*{display_name.capitalize()}*: –ù–µ—Ç")

    order_summary = "**–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:**\n\n" + "\n".join(
        order_summary_parts) + "\n\n–í—Å—ë –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –µ–≥–æ."

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ", callback_data="final_confirm_order")
    keyboard.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data="cancel_order")
    keyboard.adjust(1)

    reply_markup = keyboard.as_markup()

    if isinstance(update_object, Message):
        await update_object.answer(
            order_summary,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    elif isinstance(update_object, CallbackQuery):
        await update_object.message.edit_text(
            order_summary,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        await update_object.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback


@router.callback_query(F.data == "final_confirm_order")
async def final_confirm_order(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    user_data = await state.get_data()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑.")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º username, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –ø–æ–ª–Ω–æ–µ –∏–º—è, –∏–Ω–∞—á–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username_to_save = callback.from_user.username or callback.from_user.full_name or str(callback.from_user.id)

    new_order = await add_new_order(
        user_id=callback.from_user.id,
        username=username_to_save,
        order_text=user_data.get('order_text', '–ù–µ —É–∫–∞–∑–∞–Ω'),  # –£–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç
        full_name=user_data.get('full_name'),
        delivery_address=user_data.get('delivery_address'),
        payment_method=user_data.get('payment_method'),
        contact_phone=user_data.get('contact_phone'),
        delivery_notes=user_data.get('delivery_notes'),
    )

    await callback.message.edit_text(
        f"‚úÖ –¢–≤–æ–π –∑–∞–∫–∞–∑ ‚Ññ*{new_order.id}* —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        parse_mode=ParseMode.MARKDOWN
    )
    await state.clear()
    await callback.answer()
