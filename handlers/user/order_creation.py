import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

from db import add_new_order
from config import DISPLAY_FIELD_NAMES

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º OrderStates –∏–∑ –æ–±—â–µ–≥–æ __init__.py –ø–∞–∫–µ—Ç–∞ user
from .user_states import OrderStates
from .user_utils import _display_user_main_menu # –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞

logger = logging.getLogger(__name__)
router = Router() # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data == "make_order")
async def make_order_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑".
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑: üìù")
    await state.set_state(OrderStates.waiting_for_order_text)
    await callback.answer()

@router.message(OrderStates.waiting_for_order_text)
async def process_order_text(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞.
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞.")
    await state.update_data(order_text=message.text)

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm_input:full_name")
    keyboard.button(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_order")
    keyboard.adjust(2)

    await message.answer(
        f"–¢–≤–æ–π –∑–∞–∫–∞–∑: *{message.text}*\n\n–í—Å—ë –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –∑–∞–∫–∞–∑.",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("confirm_input:"))
async def confirm_input_and_next(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ.
    """
    field_to_ask = callback.data.split(":")[1]
    user_data = await state.get_data()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–≤–æ–¥ –¥–ª—è {field_to_ask}. –î–∞–Ω–Ω—ã–µ: {user_data}")

    prompts = {
        "full_name": "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë **–ø–æ–ª–Ω–æ–µ –∏–º—è** (–§–ò–û) üë§:",
        "delivery_address": "–£–∫–∞–∂–∏ **–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏** (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞) üè†:",
        "payment_method": "–í—ã–±–µ—Ä–∏ **—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã** (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–Ω–∞–ª–∏—á–Ω—ã–µ', '–∫–∞—Ä—Ç–æ–π') üíµ:",
        "contact_phone": "–í–≤–µ–¥–∏ **–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω** üìû:",
        "delivery_notes": "–ï—Å–ª–∏ –µ—Å—Ç—å **–ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –¥–æ—Å—Ç–∞–≤–∫–µ** (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–æ–º–æ—Ñ–æ–Ω 123'), –Ω–∞–ø–∏—à–∏ –∏—Ö. –ï—Å–ª–∏ –Ω–µ—Ç, –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å `-` –∏–ª–∏ `–Ω–µ—Ç` üí¨:"
    }

    if field_to_ask == "full_name":
        await callback.message.edit_text(prompts["full_name"], parse_mode="Markdown")
        await state.set_state(OrderStates.waiting_for_full_name)
    elif field_to_ask == "delivery_address":
        await callback.message.edit_text(prompts["delivery_address"], parse_mode="Markdown")
        await state.set_state(OrderStates.waiting_for_delivery_address)
    elif field_to_ask == "payment_method":
        payment_keyboard = InlineKeyboardBuilder()
        payment_keyboard.button(text="–ù–∞–ª–∏—á–Ω—ã–µ üí∞", callback_data="set_payment_method:–ù–∞–ª–∏—á–Ω—ã–µ")
        payment_keyboard.button(text="–ö–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ üí≥",
                                callback_data="set_payment_method:–ö–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏")
        payment_keyboard.adjust(1)

        await callback.message.edit_text(
            "–ö–∞–∫ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å **–æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑**? üí≥",
            reply_markup=payment_keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await state.set_state(OrderStates.waiting_for_payment_method)
    elif field_to_ask == "contact_phone":
        await callback.message.edit_text(prompts["contact_phone"], parse_mode="Markdown")
        await state.set_state(OrderStates.waiting_for_contact_phone)
    elif field_to_ask == "delivery_notes":
        await callback.message.edit_text(prompts["delivery_notes"], parse_mode="Markdown")
        await state.set_state(OrderStates.waiting_for_delivery_notes)
    elif field_to_ask == "final_confirm":
        await _show_order_summary(callback.message, state)

    await callback.answer()

@router.message(OrderStates.waiting_for_full_name)
@router.message(OrderStates.waiting_for_delivery_address)
@router.message(OrderStates.waiting_for_contact_phone)
@router.message(OrderStates.waiting_for_delivery_notes)
async def process_order_field(message: Message, state: FSMContext):
    """
    –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª–µ–π –∑–∞–∫–∞–∑–∞ (–§–ò–û, –∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—Ä–∏–º–µ—á–∞–Ω–∏—è).
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å.
    """
    current_state_str = await state.get_state()

    field_mapping = {
        'OrderStates:waiting_for_full_name': 'full_name',
        'OrderStates:waiting_for_delivery_address': 'delivery_address',
        'OrderStates:waiting_for_contact_phone': 'contact_phone',
        'OrderStates:waiting_for_delivery_notes': 'delivery_notes',
    }

    field_to_save = field_mapping.get(current_state_str)

    if field_to_save:
        await state.update_data(**{field_to_save: message.text})
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª {field_to_save}: {message.text}")
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state_str} –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")
        await state.clear()
        return

    next_field_logic = {
        "waiting_for_full_name": "delivery_address",
        "waiting_for_delivery_address": "payment_method",
        "waiting_for_contact_phone": "delivery_notes",
        "waiting_for_delivery_notes": "final_confirm"
    }

    current_step_name = current_state_str.split(':')[-1]
    next_field = next_field_logic.get(current_step_name)

    keyboard = InlineKeyboardBuilder()
    if next_field:
        keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"confirm_input:{next_field}")
    else:
        keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm_input:final_confirm")

    keyboard.button(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_order")
    keyboard.adjust(2)

    display_field_name = DISPLAY_FIELD_NAMES.get(field_to_save, field_to_save.replace('_', ' '))

    await message.answer(
        f"*{display_field_name.capitalize()}*: *{message.text}*\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("set_payment_method:"))
async def set_payment_method(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    payment_method = callback.data.split(":")[1]
    await state.update_data(payment_method=payment_method)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}")

    await callback.message.edit_text(
        f"–¢—ã –≤—ã–±—Ä–∞–ª —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: *{payment_method}*.\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π **–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω** üìû:",
        parse_mode="Markdown")
    await state.set_state(OrderStates.waiting_for_contact_phone)
    await callback.answer()

@router.callback_query(F.data == "cancel_order")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ.
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑.")
    await state.clear()
    await _display_user_main_menu(callback, state)
    await callback.answer()

async def _show_order_summary(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    user_data = await state.get_data()

    order_summary_parts = []
    for key, display_name in DISPLAY_FIELD_NAMES.items():
        value = user_data.get(key)
        if value:
            order_summary_parts.append(f"*{display_name.capitalize()}*: {value}")
        elif key == 'delivery_notes':
            order_summary_parts.append(f"*{display_name.capitalize()}*: –ù–µ—Ç")

    order_summary = "**–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:**\n\n" + "\n".join(
        order_summary_parts) + "\n\n–í—Å—ë –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –µ–≥–æ."

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ", callback_data="final_confirm_order")
    keyboard.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data="cancel_order")
    keyboard.adjust(1)

    await message.answer(
        order_summary,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(OrderStates.confirm_order)

@router.callback_query(F.data == "final_confirm_order")
async def final_confirm_order(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    user_data = await state.get_data()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑.")

    new_order = await add_new_order(
        user_id=callback.from_user.id,
        username=callback.from_user.username or callback.from_user.full_name,
        order_text=user_data.get('order_text', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        full_name=user_data.get('full_name'),
        delivery_address=user_data.get('delivery_address'),
        payment_method=user_data.get('payment_method'),
        contact_phone=user_data.get('contact_phone'),
        delivery_notes=user_data.get('delivery_notes'),
    )

    await callback.message.edit_text(
        f"‚úÖ –¢–≤–æ–π –∑–∞–∫–∞–∑ ‚Ññ*{new_order.id}* —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        parse_mode="Markdown"
    )
    await state.clear()
    await callback.answer()
