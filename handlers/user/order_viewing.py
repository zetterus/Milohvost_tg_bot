import logging
from typing import Union

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç ParseMode

from db import get_user_orders_paginated, count_user_orders
from config import ORDERS_PER_PAGE, ORDER_STATUS_MAP, MAX_PREVIEW_TEXT_LENGTH

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "view_my_orders")
async def view_my_orders_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã".
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ–≥–æ –∑–∞–∫–∞–∑–æ–≤.
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã'.")
    # –ü–µ—Ä–µ–¥–∞–µ–º CallbackQuery –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏–∑ Inline-–∫–Ω–æ–ø–∫–∏
    await _show_user_orders(callback, state, bot, page=0)


async def _show_user_orders(update_object: Union[Message, CallbackQuery], state: FSMContext, bot: Bot, page: int = 0):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∑–∞–∫–∞–∑—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update_object,
    –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç `bot`.

    :param update_object: –û–±—ä–µ–∫—Ç Message –∏–ª–∏ CallbackQuery, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–∏–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    :param state: FSMContext –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ–±—ä–µ–∫—Ç–∞ Bot (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π).
    :param page: –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0).
    """
    user_id = update_object.from_user.id
    chat_id = update_object.message.chat.id if isinstance(update_object, CallbackQuery) else update_object.chat.id
    message_id = update_object.message.message_id if isinstance(update_object, CallbackQuery) else update_object.message_id

    offset = page * ORDERS_PER_PAGE

    user_orders = await get_user_orders_paginated(user_id, offset, ORDERS_PER_PAGE)
    total_orders = await count_user_orders(user_id)
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –º–∏–Ω–∏–º—É–º 1, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è 0/0
    total_pages = (total_orders + ORDERS_PER_PAGE - 1) // ORDERS_PER_PAGE if total_orders > 0 else 1

    orders_list_text = f"**–¢–≤–æ–∏ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):**\n\n"
    keyboard = InlineKeyboardBuilder()

    if user_orders:
        for i, order in enumerate(user_orders):
            display_status = ORDER_STATUS_MAP.get(order.status, order.status)
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            preview_text = order.order_text[:MAX_PREVIEW_TEXT_LENGTH]
            if len(order.order_text) > MAX_PREVIEW_TEXT_LENGTH:
                preview_text += "..."

            orders_list_text += (
                f"**–ó–∞–∫–∞–∑ ‚Ññ{order.id}** (–°—Ç–∞—Ç—É—Å: {display_status})\n"
                f"  *–¢–µ–∫—Å—Ç:* {preview_text}\n"
                f"  *–î–∞—Ç–∞:* {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )
            if i < len(user_orders) - 1:
                orders_list_text += "---\n" # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if page > 0:
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_orders_page:{page - 1}")
        if page < total_pages - 1:
            keyboard.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"my_orders_page:{page + 1}")
        keyboard.adjust(2) # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä–µ–¥ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É

    else: # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
        orders_list_text = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."

    # –ö–Ω–æ–ø–∫–∞ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    keyboard.row(InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="user_main_menu_back"))

    reply_markup = keyboard.as_markup()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update_object
    if isinstance(update_object, Message):
        await bot.send_message(
            chat_id=chat_id,
            text=orders_list_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    elif isinstance(update_object, CallbackQuery):
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ CallbackQuery –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=orders_list_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        await update_object.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback

    await state.update_data(current_orders_page=page)


@router.callback_query(F.data.startswith("my_orders_page:"))
async def navigate_my_orders_page(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    page = int(callback.data.split(":")[1])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –∑–∞–∫–∞–∑–æ–≤.")
    await _show_user_orders(callback, state, bot, page)