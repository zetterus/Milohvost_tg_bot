import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from db import get_user_orders_paginated, count_user_orders
from config import ORDERS_PER_PAGE, ORDER_STATUS_MAP, MAX_PREVIEW_TEXT_LENGTH

from .user_utils import _display_user_main_menu # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

logger = logging.getLogger(__name__)
router = Router() # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è

@router.callback_query(F.data == "view_my_orders")
async def view_my_orders_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã".
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã'")
    await _show_user_orders(callback, state, bot, page=0)

async def _show_user_orders(update_object: Message | CallbackQuery, state: FSMContext, bot: Bot, page: int = 0):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∑–∞–∫–∞–∑—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    user_id = update_object.from_user.id
    offset = page * ORDERS_PER_PAGE

    user_orders = await get_user_orders_paginated(user_id, offset, ORDERS_PER_PAGE)
    total_orders = await count_user_orders(user_id)
    total_pages = (total_orders + ORDERS_PER_PAGE - 1) // ORDERS_PER_PAGE  # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

    orders_list_text = f"**–¢–≤–æ–∏ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages if total_pages > 0 else 1}):**\n\n"

    if user_orders:
        for i, order in enumerate(user_orders):
            display_status = ORDER_STATUS_MAP.get(order.status, order.status)
            orders_list_text += (
                f"**–ó–∞–∫–∞–∑ ‚Ññ{order.id}** (–°—Ç–∞—Ç—É—Å: {display_status})\n"
                f"  *–¢–µ–∫—Å—Ç:* {order.order_text[:MAX_PREVIEW_TEXT_LENGTH]}{'...' if len(order.order_text) > MAX_PREVIEW_TEXT_LENGTH else ''}\n"
                f"  *–î–∞—Ç–∞:* {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )
            if i < len(user_orders) - 1:
                orders_list_text += "---\n"

        keyboard = InlineKeyboardBuilder()
        if page > 0:
            keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_orders_page:{page - 1}")
        if page < total_pages - 1:
            keyboard.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"my_orders_page:{page + 1}")
        keyboard.adjust(2)

        keyboard.row(InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="user_main_menu_back"))

        # –í—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –≤—Ö–æ–¥—ã —á–µ—Ä–µ–∑ CallbackQuery
        await bot.edit_message_text(
            chat_id=update_object.message.chat.id,
            message_id=update_object.message.message_id,
            text=orders_list_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    else: # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
        text_no_orders = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
        keyboard_no_orders = InlineKeyboardBuilder()
        keyboard_no_orders.button(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="user_main_menu_back")

        # –í—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            chat_id=update_object.message.chat.id,
            message_id=update_object.message.message_id,
            text=text_no_orders,
            reply_markup=keyboard_no_orders.as_markup(),
            parse_mode="Markdown"
        )

    await state.update_data(current_orders_page=page)
    if isinstance(update_object, CallbackQuery): # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ CallbackQuery –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        await update_object.answer()

@router.callback_query(F.data.startswith("my_orders_page:"))
async def navigate_my_orders_page(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    page = int(callback.data.split(":")[1])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –∑–∞–∫–∞–∑–æ–≤.")
    await _show_user_orders(callback, state, bot, page)