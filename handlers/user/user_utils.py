import logging
from typing import Union

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode

from localization import get_localized_message
from db import update_user_language, get_user_language_code, get_user_notifications_status, \
    update_user_notifications_status, get_or_create_user, get_order_by_id  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç get_order_by_id
from config import ADMIN_IDS
from models import Order, User  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç User –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏

logger = logging.getLogger(__name__)
router = Router()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def _display_user_main_menu(
        update_object: Union[Message, CallbackQuery],
        state: FSMContext,
        lang: str
):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–±—Ä–∞—Å—ã–≤–∞—è –µ–≥–æ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã.

    :param update_object: –û–±—ä–µ–∫—Ç Message –∏–ª–∏ CallbackQuery, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–∏–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é.
    :param state: FSMContext –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param lang: –ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤.
    """
    user_id = update_object.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—è–∑—ã–∫: {lang}).")

    await state.clear()

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text=get_localized_message("button_make_order", lang), callback_data="make_order")
    keyboard.button(text=get_localized_message("button_view_my_orders", lang), callback_data="view_my_orders")
    keyboard.button(text=get_localized_message("button_get_help", lang), callback_data="get_help")
    keyboard.button(text=get_localized_message("button_my_language", lang), callback_data="show_language_options")
    keyboard.button(text=get_localized_message("button_notification_settings", lang),
                    callback_data="show_notification_settings")  # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
    keyboard.adjust(1)

    menu_text = get_localized_message("welcome", lang)

    reply_markup = keyboard.as_markup()

    if isinstance(update_object, Message):
        await update_object.answer(menu_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    elif isinstance(update_object, CallbackQuery):
        await update_object.answer()
        await update_object.message.edit_text(menu_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ ---
async def send_new_order_notification_to_admins(bot: Bot, order_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î –ø–æ order_id.
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ —è–∑—ã–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ –ë–î,
    –∏–Ω–∞—á–µ –Ω–∞ —è–∑—ã–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (uk).
    """
    logger.info(f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ ID {order_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    order = await get_order_by_id(order_id)
    if not order:
        logger.error(
            f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ ID {order_id} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    else:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ –ø–æ ID. {order.id}, {order.username}")
    logger.debug(f"–ó–∞–∫–∞–∑ ID {order_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ë–î.")

    for admin_id in ADMIN_IDS:
        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ ID {order_id}.")
        try:
            admin_lang = await get_user_language_code(admin_id)
            logger.debug(f"–î–ª—è –∞–¥–º–∏–Ω–∞ {admin_id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: '{admin_lang}'.")

            # –ò–ó–ú–ï–ù–ï–ù–û: –£–¥–∞–ª–µ–Ω –≤—ã–∑–æ–≤ get_or_create_user –¥–ª—è order_user
            # –¢–µ–ø–µ—Ä—å username –±–µ—Ä–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ–±—ä–µ–∫—Ç–∞ order

            title = get_localized_message("admin_new_order_notification_title", admin_lang).format(order_id=order.id)
            logger.debug(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}: '{title}'.")

            # –ò–ó–ú–ï–ù–ï–ù–û: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–∑ order.username
            if order.username:
                username_text = f"@{order.username}"
            else:
                username_text = get_localized_message("not_available", admin_lang)

            logger.debug(f"Username –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: '{username_text}'.")

            full_name_text = order.full_name if order.full_name else get_localized_message("not_provided", admin_lang)
            logger.debug(f"–ü–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: '{full_name_text}'.")

            phone_number_text = order.contact_phone if order.contact_phone else get_localized_message("not_provided",
                                                                                                      admin_lang)
            logger.debug(f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: '{phone_number_text}'.")

            status_localized = get_localized_message(f"order_status_{order.status}", admin_lang)
            logger.debug(f"–õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: '{status_localized}'.")

            details_template = get_localized_message("admin_new_order_notification_details", admin_lang)
            logger.debug(f"–®–∞–±–ª–æ–Ω –¥–µ—Ç–∞–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: '{details_template[:100]}...'")  # –õ–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—å —à–∞–±–ª–æ–Ω–∞

            notification_text = title + "\n\n" + details_template.format(
                order_id=order.id,
                user_id=order.user_id,
                username=username_text,
                full_name=full_name_text,
                phone_number=phone_number_text,
                order_text=order.order_text,
                status=status_localized,
                created_at=order.created_at.strftime('%d.%m.%Y %H:%M')
            )
            logger.debug(
                f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}: '{notification_text[:500]}...'")  # –õ–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è

            await bot.send_message(admin_id, notification_text, parse_mode='HTML')
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ ID {order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}.")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ ID {order.id} –∞–¥–º–∏–Ω—É {admin_id}: {e}",
                         exc_info=True)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_user_notification(bot: Bot, user_id: int, message_key: str, lang: str, order_id: int,
                                 **kwargs):  # –ò–ó–ú–ï–ù–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–æ order_id
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    notifications_enabled = await get_user_notifications_status(user_id)
    if notifications_enabled:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            order = await get_order_by_id(order_id)
            if not order:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ ID {order_id} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
                return

            # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º order.id –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            text = get_localized_message(message_key, lang).format(order_id=order.id, **kwargs)
            await bot.send_message(user_id, text, parse_mode=ParseMode.HTML)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{message_key}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{message_key}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª—é—á–µ–Ω—ã. –°–æ–æ–±—â–µ–Ω–∏–µ '{message_key}' –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


# --- –•–ï–ù–î–õ–ï–† –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø—Ü–∏–π —è–∑—ã–∫–∞ ---
@router.callback_query(F.data == "show_language_options")
async def show_language_options_callback(
        callback: CallbackQuery,
        lang: str
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ü–∏–∏ –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø—Ü–∏–∏ —è–∑—ã–∫–∞ (—Ç–µ–∫—É—â–∏–π: {lang}).")

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="set_lang_uk")
    keyboard.button(text="üá¨üáß English", callback_data="set_lang_en")
    keyboard.button(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")
    keyboard.row(InlineKeyboardButton(text=get_localized_message("button_back_to_main_menu", lang),
                                      callback_data="user_main_menu_back"))
    keyboard.adjust(1)

    await callback.message.edit_text(
        get_localized_message("choose_language_prompt", lang),
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —è–∑—ã–∫–µ (–ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ main_menu.py) ---
@router.message(F.text == "–ú–æ–π —è–∑—ã–∫")
async def get_my_language(
        message: Message,
        lang: str
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ.
    """
    await message.answer(get_localized_message("your_current_language", lang).format(current_lang=lang))


# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ (–ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ main_menu.py) ---
@router.callback_query(F.data.startswith("set_lang_"))
async def change_user_language(
        callback: CallbackQuery,
        lang: str
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞.
    –û–±–Ω–æ–≤–ª—è–µ—Ç —è–∑—ã–∫ –≤ –ë–î.
    """
    user_id = callback.from_user.id
    new_lang = callback.data.split('_')[2]

    updated_user = await update_user_language(user_id, new_lang)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(
        text=get_localized_message("button_back_to_main_menu", new_lang),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º new_lang –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
        callback_data="user_main_menu_back"
    ))
    reply_markup = keyboard.as_markup()

    if updated_user:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥–∞–≤–∞—è new_lang –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        success_message_text = get_localized_message("language_changed_success_alert",
                                                     updated_user.language_code).format(
            new_lang=updated_user.language_code.upper())

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É
        await callback.message.edit_text(
            success_message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    else:
        error_message_text = get_localized_message("language_change_failed_alert", lang)
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –∏ –∫–Ω–æ–ø–∫—É
        await callback.message.edit_text(
            error_message_text,
            reply_markup=reply_markup,  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            parse_mode=ParseMode.HTML
        )
        await callback.answer()


# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def _display_notification_settings_menu(
        update_object: Union[Message, CallbackQuery],
        lang: str
):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = update_object.from_user.id
    current_status = await get_user_notifications_status(user_id)

    status_text_key = "notifications_enabled_status" if current_status else "notifications_disabled_status"
    status_emoji = "‚úÖ" if current_status else "‚ùå"

    menu_text = get_localized_message("notification_settings_title", lang).format(
        current_status=get_localized_message(status_text_key, lang),
        status_emoji=status_emoji
    )

    keyboard = InlineKeyboardBuilder()
    if current_status:
        keyboard.button(text=get_localized_message("button_disable_notifications", lang),
                        callback_data="toggle_notifications_off")
    else:
        keyboard.button(text=get_localized_message("button_enable_notifications", lang),
                        callback_data="toggle_notifications_on")

    keyboard.row(InlineKeyboardButton(text=get_localized_message("button_back_to_main_menu", lang),
                                      callback_data="user_main_menu_back"))
    keyboard.adjust(1)

    reply_markup = keyboard.as_markup()

    if isinstance(update_object, Message):
        await update_object.answer(menu_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    elif isinstance(update_object, CallbackQuery):
        await update_object.message.edit_text(menu_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        await update_object.answer()


# –ù–û–í–´–ô –•–ï–ù–î–õ–ï–†: –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data == "show_notification_settings")
async def show_notification_settings_callback(
        callback: CallbackQuery,
        lang: str
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    await _display_notification_settings_menu(callback, lang)


# –ù–û–í–´–ô –•–ï–ù–î–õ–ï–†: –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("toggle_notifications_"))
async def toggle_notifications_callback(
        callback: CallbackQuery,
        lang: str
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    user_id = callback.from_user.id
    action = callback.data.split('_')[-1]  # 'on' –∏–ª–∏ 'off'

    new_status = True if action == 'on' else False

    updated_user = await update_user_notifications_status(user_id, new_status)

    if updated_user:
        alert_text_key = "notifications_enabled_alert" if new_status else "notifications_disabled_alert"
        alert_text = get_localized_message(alert_text_key, lang)
        await callback.answer(alert_text, show_alert=True)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {action}–∫–ª—é—á–µ–Ω—ã.")
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        await _display_notification_settings_menu(callback, lang)
    else:
        await callback.answer(get_localized_message("notifications_toggle_failed_alert", lang), show_alert=True)
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
