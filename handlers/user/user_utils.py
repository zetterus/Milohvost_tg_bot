import logging
from typing import Union # Dict, Any –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
# from aiogram.fsm.storage.base import BaseStorage, StorageKey # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã

from aiogram.utils.keyboard import InlineKeyboardBuilder # <-- –î–û–ë–ê–í–õ–ï–ù–û
from aiogram.enums import ParseMode # <-- –î–û–ë–ê–í–õ–ï–ù–û

from localization import get_localized_message # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
from db import update_user_language # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î (get_user_language_code —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

logger = logging.getLogger(__name__)
router = Router() # <-- –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è user_utils.py

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def _display_user_main_menu(
    update_object: Union[Message, CallbackQuery],
    state: FSMContext,
    lang: str
):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–±—Ä–∞—Å—ã–≤–∞—è –µ–≥–æ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã.

    :param update_object: –û–±—ä–µ–∫—Ç Message –∏–ª–∏ CallbackQuery, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–∏–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é.
    :param state: FSMContext –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param lang: –ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤.
    """
    user_id = update_object.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—è–∑—ã–∫: {lang}).")

    await state.clear()  # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text=get_localized_message("button_make_order", lang), callback_data="make_order")
    keyboard.button(text=get_localized_message("button_view_my_orders", lang), callback_data="view_my_orders")
    keyboard.button(text=get_localized_message("button_get_help", lang), callback_data="get_help")
    keyboard.button(text=get_localized_message("button_my_language", lang), callback_data="show_language_options")
    keyboard.adjust(1)

    menu_text = get_localized_message("welcome", lang)

    reply_markup = keyboard.as_markup()

    if isinstance(update_object, Message):
        await update_object.answer(menu_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    elif isinstance(update_object, CallbackQuery):
        await update_object.answer()
        await update_object.message.edit_text(menu_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

# --- –•–ï–ù–î–õ–ï–† –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø—Ü–∏–π —è–∑—ã–∫–∞ ---
@router.callback_query(F.data == "show_language_options")
async def show_language_options_callback(
    callback: CallbackQuery,
    lang: str
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ü–∏–∏ –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø—Ü–∏–∏ —è–∑—ã–∫–∞ (—Ç–µ–∫—É—â–∏–π: {lang}).")

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="set_lang_uk")
    keyboard.button(text="üá¨üáß English", callback_data="set_lang_en")
    keyboard.button(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")
    keyboard.row(InlineKeyboardButton(text=get_localized_message("button_back_to_main_menu", lang), callback_data="user_main_menu_back"))
    keyboard.adjust(1)

    await callback.message.edit_text(
        get_localized_message("choose_language_prompt", lang),
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —è–∑—ã–∫–µ (–ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ main_menu.py) ---
@router.message(F.text == "–ú–æ–π —è–∑—ã–∫")
async def get_my_language(
        message: Message,
        lang: str # <-- –û–°–¢–ê–í–õ–ï–ù–û
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ.
    """
    # get_user_language_code —Ç–µ–ø–µ—Ä—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç storage_key –∏ storage_obj
    # current_lang = await get_user_language_code(message.from_user.id) # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
    await message.answer(get_localized_message("your_current_language", lang).format(current_lang=lang))


# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ (–ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ main_menu.py) ---
@router.callback_query(F.data.startswith("set_lang_"))
async def change_user_language(
        callback: CallbackQuery,
        lang: str # <-- –û–°–¢–ê–í–õ–ï–ù–û
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞.
    –û–±–Ω–æ–≤–ª—è–µ—Ç —è–∑—ã–∫ –≤ –ë–î.
    """
    user_id = callback.from_user.id
    new_lang = callback.data.split('_')[2] # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ –∏–∑ callback_data

    updated_user = await update_user_language(user_id, new_lang)

    if updated_user:
        await callback.answer(get_localized_message("language_changed_success_alert", updated_user.language_code),
                              show_alert=True)
        await callback.message.delete()
    else:
        await callback.answer(get_localized_message("language_change_failed_alert", lang), show_alert=True)
        await callback.message.edit_reply_markup(reply_markup=None)