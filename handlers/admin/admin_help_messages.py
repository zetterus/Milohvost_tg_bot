import logging

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from db import (
    get_active_help_message_from_db,
    add_help_message,
    get_help_message_by_id,
    set_active_help_message,
    delete_help_message,
    get_all_help_messages
)
from .admin_filters import IsAdmin
from .admin_states import AdminStates

logger = logging.getLogger(__name__)
router = Router()


# --- –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–º–æ—â–∏ ---

@router.callback_query(F.data == "admin_manage_help_messages", IsAdmin())
async def admin_manage_help_messages_callback(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–º–æ—â–∏.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π.
    """
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤–æ—à–µ–ª –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–º–æ—â–∏.")

    active_message = await get_active_help_message_from_db()
    current_active_status = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
    if active_message:
        # –ó–∞–º–µ–Ω—è–µ–º hcode –Ω–∞ HTML-—Ç–µ–≥
        current_active_status = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: <code>{active_message.id}</code>)"

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏", callback_data="admin_create_help_message"))
    keyboard.row(InlineKeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏",
                                      callback_data="admin_manage_existing_help_messages"))
    keyboard.row(InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_panel_back"))
    keyboard.adjust(1)

    await callback.message.edit_text(
        f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–º–æ—â–∏</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_active_status}\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data == "admin_view_active_help_message", IsAdmin())
async def admin_view_active_help_message_callback(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏.
    """
    active_message = await get_active_help_message_from_db()

    if active_message:
        # –ó–∞–º–µ–Ω—è–µ–º hbold –∏ hcode –Ω–∞ HTML-—Ç–µ–≥–∏
        text_to_display = (
            f"<b>–¢–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏:</b>\n\n"
            f"{active_message.message_text}\n\n"
            f"<b>ID —Å–æ–æ–±—â–µ–Ω–∏—è:</b> <code>{active_message.id}</code>\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–Ω–æ ‚úÖ' if active_message.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ ‚ùå'}\n"
            f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {active_message.created_at.strftime('%d.%m.%Y %H:%M:%S')}"
        )
    else:
        # –ó–∞–º–µ–Ω—è–µ–º hbold –Ω–∞ HTML-—Ç–µ–≥
        text_to_display = "<b>–ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</b>"

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–º–æ—â—å—é", callback_data="admin_manage_help_messages"))

    await callback.message.edit_text(
        text_to_display,
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


# --- –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏ ---

@router.callback_query(F.data == "admin_create_help_message", IsAdmin())
async def admin_create_help_message_start(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∞–¥–º–∏–Ω–∞ –≤ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.
    """
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏.")
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b> –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏. \n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <i>HTML</i> —Ä–∞–∑–º–µ—Ç–∫—É.",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(AdminStates.waiting_for_help_message_text)
    await callback.answer()


@router.message(AdminStates.waiting_for_help_message_text, IsAdmin())
async def admin_process_new_help_message_text(message: Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–æ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã.
    """
    help_message_text = message.text
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏.")

    if not help_message_text or not help_message_text.strip():
        await message.answer(
            "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.",
            parse_mode=ParseMode.HTML
        )
        return

    await state.update_data(new_help_message_text=help_message_text)

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º ‚úÖ",
                                      callback_data="admin_save_and_activate_help_message"))
    keyboard.row(
        InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å üìù", callback_data="admin_save_only_help_message"))
    keyboard.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ ‚ùå", callback_data="admin_cancel_help_message_creation"))
    keyboard.adjust(1)

    # –ó–∞–º–µ–Ω—è–µ–º hbold –Ω–∞ HTML-—Ç–µ–≥–∏
    preview_text = (
        f"<b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
        f"{help_message_text}\n\n"
        "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º?"
    )

    await message.answer(
        preview_text,
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data == "admin_save_and_activate_help_message", IsAdmin())
async def admin_save_and_activate_help_message(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –≤ –ë–î –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º.
    """
    user_data = await state.get_data()
    message_text = user_data.get("new_help_message_text")

    if not message_text:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()
        await admin_manage_help_messages_callback(callback)
        return

    new_help_msg = await add_help_message(message_text, is_active=True)
    await set_active_help_message(new_help_msg.id)

    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} —Å–æ—Ö—Ä–∞–Ω–∏–ª –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ (ID: {new_help_msg.id}).")
    await callback.message.edit_text(
        # –ó–∞–º–µ–Ω—è–µ–º hcode –Ω–∞ HTML-—Ç–µ–≥
        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ (ID: <code>{new_help_msg.id}</code>) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.",
        parse_mode=ParseMode.HTML
    )
    await state.clear()
    await admin_manage_help_messages_callback(callback)
    await callback.answer()


@router.callback_query(F.data == "admin_save_only_help_message", IsAdmin())
async def admin_save_only_help_message(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –≤ –ë–î, –Ω–æ –Ω–µ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º.
    """
    user_data = await state.get_data()
    message_text = user_data.get("new_help_message_text")

    if not message_text:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode=ParseMode.HTML
        )
        await state.clear()
        await admin_manage_help_messages_callback(callback)
        return

    new_help_msg = await add_help_message(message_text, is_active=False)
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} —Å–æ—Ö—Ä–∞–Ω–∏–ª –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –±–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (ID: {new_help_msg.id}).")
    await callback.message.edit_text(
        # –ó–∞–º–µ–Ω—è–µ–º hcode –Ω–∞ HTML-—Ç–µ–≥
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ (ID: <code>{new_help_msg.id}</code>) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.",
        parse_mode=ParseMode.HTML
    )
    await state.clear()
    await admin_manage_help_messages_callback(callback)
    await callback.answer()


@router.callback_query(F.data == "admin_cancel_help_message_creation", IsAdmin())
async def admin_cancel_help_message_creation(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞: –æ—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏.
    """
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏.")
    await state.clear()
    await callback.message.edit_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        parse_mode=ParseMode.HTML
    )
    await admin_manage_help_messages_callback(callback)
    await callback.answer()


# --- –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–º–æ—â–∏ ---

@router.callback_query(F.data.startswith("admin_manage_existing_help_messages"), IsAdmin())
async def admin_manage_existing_help_messages(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–º–æ—â–∏.
    """
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–º–æ—â–∏.")
    all_messages = await get_all_help_messages()

    if not all_messages:
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–º–æ—â—å—é", callback_data="admin_manage_help_messages"))
        await callback.message.edit_text(
            "<b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–º–æ—â–∏ –ø–æ–∫–∞ –Ω–µ—Ç.</b>",
            reply_markup=keyboard.as_markup(),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
        return

    keyboard = InlineKeyboardBuilder()

    for msg in all_messages:
        status_emoji = "‚úÖ" if msg.is_active else "‚ùå"
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º replace('\n', ' ') –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–Ω–æ–ø–∫–∏
        display_text = msg.message_text.replace('\n', ' ')
        if len(display_text) > 50:
            display_text = display_text[:50] + "..."
        button_text = f"{status_emoji} ID: {msg.id} - {display_text}"
        keyboard.row(InlineKeyboardButton(text=button_text, callback_data=f"admin_select_help_message:{msg.id}"))

    keyboard.row(InlineKeyboardButton(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–º–æ—â—å—é", callback_data="admin_manage_help_messages"))
    keyboard.adjust(1)

    await callback.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/—É–¥–∞–ª–µ–Ω–∏—è:</b>",
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_select_help_message:"), IsAdmin())
async def admin_select_help_message(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞: –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è (–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å).
    """
    message_id = int(callback.data.split(":")[1])
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ ID: {message_id}.")

    selected_message = await get_help_message_by_id(message_id)

    if not selected_message:
        await callback.message.edit_text(
            "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</b>",
            parse_mode=ParseMode.HTML
        )
        await admin_manage_existing_help_messages(callback)
        await callback.answer()
        return

    # –ó–∞–º–µ–Ω—è–µ–º hbold –∏ hcode –Ω–∞ HTML-—Ç–µ–≥–∏
    text_to_display = (
        f"<b>–î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏:</b>\n\n"
        f"{selected_message.message_text}\n\n"
        f"<b>ID —Å–æ–æ–±—â–µ–Ω–∏—è:</b> <code>{selected_message.id}</code>\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–Ω–æ ‚úÖ' if selected_message.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ ‚ùå'}\n"
        f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {selected_message.created_at.strftime('%d.%m.%Y %H:%M:%S')}\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {selected_message.updated_at.strftime('%d.%m.%Y %H:%M:%S')}"
    )

    keyboard = InlineKeyboardBuilder()
    if not selected_message.is_active:
        keyboard.row(InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º ‚úÖ",
                                          callback_data=f"admin_activate_help_message:{selected_message.id}"))

    keyboard.row(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å üóëÔ∏è",
                                      callback_data=f"admin_confirm_delete_help_message:{selected_message.id}"))
    keyboard.row(InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="admin_manage_existing_help_messages"))
    keyboard.adjust(1)

    await callback.message.edit_text(
        text_to_display,
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_activate_help_message:"), IsAdmin())
async def admin_activate_help_message(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞: –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏.
    –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    message_id = int(callback.data.split(":")[1])
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ ID: {message_id}.")

    activated_message = await set_active_help_message(message_id)

    if activated_message:
        await callback.message.edit_text(
            # –ó–∞–º–µ–Ω—è–µ–º hcode –Ω–∞ HTML-—Ç–µ–≥
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ID: <code>{activated_message.id}</code> —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.",
            parse_mode=ParseMode.HTML
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.",
            parse_mode=ParseMode.HTML
        )
    await admin_manage_existing_help_messages(callback)
    await callback.answer()


@router.callback_query(F.data.startswith("admin_confirm_delete_help_message:"), IsAdmin())
async def admin_confirm_delete_help_message(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏
    –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.
    """
    message_id = int(callback.data.split(":")[1])
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏ ID: {message_id}.")

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"admin_delete_help_message:{message_id}"))
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞",
                                      callback_data=f"admin_select_help_message:{message_id}"))
    keyboard.adjust(1)

    await callback.message.edit_text(
        # –ó–∞–º–µ–Ω—è–µ–º hcode –Ω–∞ HTML-—Ç–µ–≥
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ ID: <code>{message_id}</code>?",
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_delete_help_message:"), IsAdmin())
async def admin_delete_help_message_confirmed(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞: —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –∏–∑ –ë–î –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    message_id = int(callback.data.split(":")[1])
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏ ID: {message_id}.")

    success = await delete_help_message(message_id)

    if success:
        await callback.message.edit_text(
            # –ó–∞–º–µ–Ω—è–µ–º hcode –Ω–∞ HTML-—Ç–µ–≥
            f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ID: <code>{message_id}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.",
            parse_mode=ParseMode.HTML
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
            parse_mode=ParseMode.HTML
        )
    await admin_manage_existing_help_messages(callback)
    await callback.answer()
