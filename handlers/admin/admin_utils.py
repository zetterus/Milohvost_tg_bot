import logging
import math
import urllib.parse
from typing import Union  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Union –¥–ª—è type hinting

from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.enums import ParseMode  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ParseMode –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

from config import ORDER_STATUS_MAP, ORDERS_PER_PAGE, MAX_PREVIEW_TEXT_LENGTH
from db import get_all_orders, search_orders

logger = logging.getLogger(__name__)
router = Router()


async def _display_admin_main_menu(update_object: Union[Message, CallbackQuery], state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç Message –∏–ª–∏ CallbackQuery –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    await state.clear()

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã üìã", callback_data="admin_all_orders_start")
    keyboard.button(text="–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã üîç", callback_data="admin_find_orders")
    keyboard.button(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–º–æ—â—å—é üí¨", callback_data="admin_manage_help_messages")
    keyboard.adjust(1)

    # –ó–∞–º–µ–Ω—è–µ–º hbold –Ω–∞ HTML-—Ç–µ–≥ <b>
    text = "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
    reply_markup = keyboard.as_markup()

    if isinstance(update_object, Message):
        await update_object.answer(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    elif isinstance(update_object, CallbackQuery):
        await update_object.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await update_object.message.edit_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)


async def _display_orders_paginated(
        update_object: Union[Message, CallbackQuery],
        state: FSMContext,
        current_page: int,
        is_search: bool = False
):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.

    –§—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ª–∏–±–æ –≤—Å–µ –∑–∞–∫–∞–∑—ã, –ª–∏–±–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞,
    –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–∞ 'is_search'. –û–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç
    —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–æ–≤.

    :param update_object: –û–±—ä–µ–∫—Ç Message –∏–ª–∏ CallbackQuery, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–∏–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    :param state: FSMContext –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –¥–∞–Ω–Ω—ã–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º).
    :param current_page: –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :param is_search: –ë—É–ª–µ–≤—ã–π —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞.
                      (True –¥–ª—è –ø–æ–∏—Å–∫–∞, False –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤).
    """
    user_id = update_object.from_user.id
    offset = (current_page - 1) * ORDERS_PER_PAGE
    query_text = None

    if is_search:
        data = await state.get_data()
        query_text = data.get("search_query")
        if not query_text:
            logger.error(
                f"–ê–¥–º–∏–Ω {user_id}: –ü–æ–ø—ã—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –±–µ–∑ search_query –≤ FSM. –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
            await update_object.answer("–û—à–∏–±–∫–∞: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ edit_text
            await _display_admin_main_menu(update_object, state)
            return

        orders, total_orders = await search_orders(search_query=query_text, offset=offset, limit=ORDERS_PER_PAGE)
    else:
        orders, total_orders = await get_all_orders(offset=offset, limit=ORDERS_PER_PAGE)

    await state.update_data(current_page=current_page)

    total_pages = math.ceil(total_orders / ORDERS_PER_PAGE) if total_orders > 0 else 1

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ ---
    if query_text:
        header_text = (
            f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query_text}' (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}, –≤—Å–µ–≥–æ: {total_orders}):</b>"
        )
    else:
        header_text = (
            f"<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}, –≤—Å–µ–≥–æ: {total_orders}):</b>"
        )

    orders_content_text = header_text + "\n\n"

    if not orders:
        orders_content_text += "–ó–∞–∫–∞–∑–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç."

    # --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ ---
    order_buttons_builder = InlineKeyboardBuilder()
    for order in orders:
        display_status = ORDER_STATUS_MAP.get(order.status, order.status)
        preview_text = order.order_text[:MAX_PREVIEW_TEXT_LENGTH]
        if len(order.order_text) > MAX_PREVIEW_TEXT_LENGTH:
            preview_text += "..."

        button_text = f"#{order.id} | {preview_text} | {display_status}"
        order_buttons_builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"view_order_{order.id}"
        ))
    order_buttons_builder.adjust(1)

    # --- –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---
    pagination_builder = InlineKeyboardBuilder()
    page_base_prefix = "admin_search_page" if is_search else "admin_all_orders_page"
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    encoded_query_text = urllib.parse.quote_plus(query_text) if query_text else ""
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç–æ–π
    query_param_suffix = f":{encoded_query_text}" if encoded_query_text else ""

    if current_page > 1:
        pagination_builder.button(text="‚èÆÔ∏è", callback_data=f"{page_base_prefix}:1{query_param_suffix}")
        if current_page > 5:
            pagination_builder.button(text="‚óÄÔ∏è5",
                                      callback_data=f"{page_base_prefix}:{max(1, current_page - 5)}{query_param_suffix}")
        pagination_builder.button(text="‚óÄÔ∏è",
                                  callback_data=f"{page_base_prefix}:{current_page - 1}{query_param_suffix}")

    if current_page < total_pages:
        pagination_builder.button(text="‚ñ∂Ô∏è",
                                  callback_data=f"{page_base_prefix}:{current_page + 1}{query_param_suffix}")
        if current_page < total_pages - 4:
            pagination_builder.button(text="‚ñ∂Ô∏è5",
                                      callback_data=f"{page_base_prefix}:{min(total_pages, current_page + 5)}{query_param_suffix}")
        pagination_builder.button(text="‚è≠Ô∏è",
                                  callback_data=f"{page_base_prefix}:{total_pages}{query_param_suffix}")

    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: —Å–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–æ–≤, –∑–∞—Ç–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
    final_keyboard = InlineKeyboardBuilder()
    final_keyboard.attach(order_buttons_builder)

    if total_orders > ORDERS_PER_PAGE:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        final_keyboard.row(*pagination_builder.buttons)

    final_keyboard.row(InlineKeyboardButton(
        text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        callback_data="admin_panel_back"
    ))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(update_object, Message):
        await update_object.answer(orders_content_text, reply_markup=final_keyboard.as_markup(),
                                   parse_mode=ParseMode.HTML)
    elif isinstance(update_object, CallbackQuery):
        await update_object.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await update_object.message.edit_text(orders_content_text, reply_markup=final_keyboard.as_markup(),
                                              parse_mode=ParseMode.HTML)
