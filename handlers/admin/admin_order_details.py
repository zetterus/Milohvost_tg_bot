import logging
import urllib.parse

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.utils.markdown import hbold, hcode
from aiogram.fsm.context import FSMContext

from config import ORDER_STATUS_MAP
from db import get_order_by_id, update_order_status, update_order_text, delete_order
from .admin_utils import _display_orders_paginated
from .admin_filters import IsAdmin
from .admin_states import AdminStates

logger = logging.getLogger(__name__)
router = Router()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
async def _build_order_details_and_keyboard(order_id: int, state: FSMContext) -> tuple[
    str, InlineKeyboardMarkup | None]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.
    """
    order = await get_order_by_id(order_id)
    if not order:
        return "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", None

    display_status = ORDER_STATUS_MAP.get(order.status, order.status)
    order_details_text = (
        f"{hbold('–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ ')}{hbold(str(order.id))}\n\n"
        f"{hbold('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:')} {hbold(order.username or 'N/A')} ({order.user_id})\n"
        f"{hbold('–°—Ç–∞—Ç—É—Å:')} {hbold(display_status)}\n"
        f"{hbold('–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:')}\n{hcode(order.order_text)}\n"
        f"{hbold('–§–ò–û:')} {order.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"{hbold('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:')} {order.delivery_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"{hbold('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:')} {order.payment_method or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"{hbold('–¢–µ–ª–µ—Ñ–æ–Ω:')} {order.contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"{hbold('–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:')} {order.delivery_notes or '–ù–µ—Ç'}\n"
        f"{hbold('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:')} {order.created_at.strftime('%d.%m.%Y %H:%M:%S')}\n"
    )

    status_keyboard = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
    for status_key, status_value in ORDER_STATUS_MAP.items():
        if status_key != order.status:
            status_keyboard.add(InlineKeyboardButton(
                text=f"üîÑ {status_value}",
                callback_data=f"admin_change_status_{order.id}_{status_key}"
            ))
    status_keyboard.adjust(2)

    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    status_keyboard.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞",
            callback_data=f"admin_edit_order_text_{order.id}"
        ),
        InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data=f"admin_confirm_delete_order_{order.id}"
        )
    )

    # –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º/–ø–æ–∏—Å–∫—É"
    data = await state.get_data()
    current_page = data.get("current_page", 1)
    search_query = data.get("search_query")

    if search_query:
        encoded_query = urllib.parse.quote_plus(search_query)
        status_keyboard.row(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É",
            callback_data=f"admin_search_page:{current_page}:{encoded_query}"
        ))
    else:
        status_keyboard.row(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º",
            callback_data=f"admin_all_orders_page:{current_page}"
        ))

    return order_details_text, status_keyboard.as_markup()


@router.callback_query(F.data.startswith("view_order_"), IsAdmin())
async def admin_view_order_details_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑ #ID" –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
    """
    order_id = int(callback.data.split("_")[2])
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ID {order_id}.")

    order_details_text, keyboard_markup = await _build_order_details_and_keyboard(order_id, state)

    await callback.message.edit_text(
        order_details_text,
        reply_markup=keyboard_markup,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_change_status_"), IsAdmin())
async def admin_change_order_status_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º .split('_') —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: F.data.startswith("admin_change_status_") —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª –Ω–∞—á–∞–ª–æ
        # –ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ "admin_change_status_" –±—É–¥–µ—Ç order_id, –∞ –∑–∞—Ç–µ–º new_status
        _, _, _, order_id_str, new_status = callback.data.split('_', 4)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 5 —á–∞—Å—Ç–µ–π
        order_id = int(order_id_str)
    except (ValueError, IndexError):
        logger.error(
            f"–ê–¥–º–∏–Ω {callback.from_user.id}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {callback.data}")
        await bot.answer_callback_query(callback.id, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ID {order_id} –Ω–∞ '{new_status}'.")

    updated_order = await update_order_status(order_id, new_status)

    if updated_order:
        display_status = ORDER_STATUS_MAP.get(updated_order.status, updated_order.status)
        await bot.answer_callback_query(callback.id, text=f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{display_status}'!",
                                        show_alert=True)

        order_details_text, keyboard_markup = await _build_order_details_and_keyboard(order_id, state)

        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=order_details_text,
            reply_markup=keyboard_markup,
            parse_mode="HTML"
        )
    else:
        await bot.answer_callback_query(callback.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                        show_alert=True)
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.",
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("admin_edit_order_text_"), IsAdmin())
async def admin_edit_order_text_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞.
    """
    try:
        order_id = int(callback.data.split("_")[4])  # admin_edit_order_text_ORDER_ID
    except (ValueError, IndexError):
        logger.error(
            f"–ê–¥–º–∏–Ω {callback.from_user.id}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞ ID {order_id}.")

    await state.update_data(
        editing_order_id=order_id,
        original_message_id=callback.message.message_id,
        original_chat_id=callback.message.chat.id,
    )
    await state.set_state(AdminStates.waiting_for_order_text_edit)

    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"view_order_{order_id}")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(StateFilter(AdminStates.waiting_for_order_text_edit), IsAdmin())
async def admin_process_new_order_text(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞,
    —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    data = await state.get_data()
    order_id = data.get("editing_order_id")
    original_message_id = data.get("original_message_id")
    original_chat_id = data.get("original_chat_id")

    if not all([order_id, original_message_id, original_chat_id]):
        logger.error(f"–ê–¥–º–∏–Ω {message.from_user.id}: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ FSM.")
        await message.answer(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel_back")]
            ]),
            parse_mode="HTML"
        )
        await state.clear()
        return

    new_order_text = message.text.strip()
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–≤–µ–ª –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ID {order_id}.")

    updated_order = await update_order_text(order_id=order_id, new_text=new_order_text)

    await state.clear()

    if updated_order:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∞
        await message.answer(f"–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", parse_mode="HTML")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        order_details_text, keyboard_markup = await _build_order_details_and_keyboard(order_id, state)
        await bot.edit_message_text(
            chat_id=original_chat_id,
            message_id=original_message_id,
            text=order_details_text,
            reply_markup=keyboard_markup,
            parse_mode="HTML"
        )
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
        # –í —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # –ï—Å–ª–∏ _build_order_details_and_keyboard –≤–µ—Ä–Ω–µ—Ç —Ç–µ–∫—Å—Ç "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", —ç—Ç–æ –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        order_details_text, keyboard_markup = await _build_order_details_and_keyboard(order_id, state)
        await bot.edit_message_text(
            chat_id=original_chat_id,
            message_id=original_message_id,
            text=order_details_text,
            reply_markup=keyboard_markup,
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("admin_confirm_delete_order_"), IsAdmin())
async def admin_confirm_delete_order_callback(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    """
    try:
        order_id = int(callback.data.split("_")[4])  # admin_confirm_delete_order_ORDER_ID
    except (ValueError, IndexError):
        logger.error(
            f"–ê–¥–º–∏–Ω {callback.from_user.id}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ID {order_id}.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç–∞, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–º—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
    await state.update_data(
        deleting_order_id=order_id,
        original_message_id_for_delete_confirm=callback.message.message_id,
        original_chat_id_for_delete_confirm=callback.message.chat.id,
    )

    confirm_keyboard = InlineKeyboardBuilder()
    confirm_keyboard.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_order_{order_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_order_{order_id}")
    )

    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order_id}?",
        reply_markup=confirm_keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_delete_order_"), IsAdmin())
async def admin_delete_order_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    try:
        order_id = int(callback.data.split("_")[3])  # admin_delete_order_ORDER_ID
    except (ValueError, IndexError):
        logger.error(f"–ê–¥–º–∏–Ω {callback.from_user.id}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {callback.data}")
        await bot.answer_callback_query(callback.id, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ID {order_id}.")

    deleted = await delete_order(order_id=order_id)
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, —Ç–∞–∫ –∫–∞–∫ –∑–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω, –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

    if deleted:
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            parse_mode="HTML"
        )
        await bot.answer_callback_query(callback.id, text=f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        # –ó–¥–µ—Å—å –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–∞—Ä—ã–µ FSM –¥–∞–Ω–Ω—ã–µ –¥–ª—è current_page/search_query,
        # —Ç–∞–∫ –∫–∞–∫ state.clear() –±—ã–ª –≤—ã–∑–≤–∞–Ω.
        # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é, –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ callback_data
        # –∏–ª–∏ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤.
        await _display_orders_paginated(callback, state, current_page=1, is_search=False)
    else:
        await bot.answer_callback_query(callback.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞
        order_details_text, keyboard_markup = await _build_order_details_and_keyboard(order_id, state)
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=order_details_text,
            reply_markup=keyboard_markup,
            parse_mode="HTML"
        )
