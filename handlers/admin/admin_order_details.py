import logging
import urllib.parse

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.markdown import hbold, hcode
from aiogram.fsm.context import FSMContext

from config import ORDER_STATUS_MAP
from db import get_order_by_id, update_order_status, update_order_text, delete_order
from .admin_utils import _display_admin_main_menu, _display_orders_paginated
from .admin_filters import IsAdmin
from .admin_states import AdminStates

logger = logging.getLogger(__name__)
router = Router()  # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è


@router.callback_query(F.data.startswith("view_order_"), IsAdmin())
async def admin_view_order_details_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑ #ID" –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
    """
    order_id = int(callback.data.split("_")[2])
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ID {order_id}.")

    order = await get_order_by_id(order_id)

    if order:
        display_status = ORDER_STATUS_MAP.get(order.status, order.status)
        order_details_text = (
            f"{hbold('–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ ')}{hbold(str(order.id))}\n\n"
            f"{hbold('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:')} {hbold(order.username or 'N/A')} ({order.user_id})\n"
            f"{hbold('–°—Ç–∞—Ç—É—Å:')} {hbold(display_status)}\n"
            f"{hbold('–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:')}\n{hcode(order.order_text)}\n"
            f"{hbold('–§–ò–û:')} {order.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"{hbold('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:')} {order.delivery_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"{hbold('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:')} {order.payment_method or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"{hbold('–¢–µ–ª–µ—Ñ–æ–Ω:')} {order.contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"{hbold('–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:')} {order.delivery_notes or '–ù–µ—Ç'}\n"
            f"{hbold('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:')} {order.created_at.strftime('%d.%m.%Y %H:%M:%S')}\n"
        )

        status_keyboard = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ (–æ—Å—Ç–∞—é—Ç—Å—è)
        for status_key, status_value in ORDER_STATUS_MAP.items():
            if status_key != order.status:
                status_keyboard.add(InlineKeyboardButton(
                    text=f"üîÑ {status_value}",
                    callback_data=f"admin_change_status_{order.id}_{status_key}"
                ))
        status_keyboard.adjust(2)  # Adjusts status buttons to 2 per row

        # --- –ù–û–í–´–ï –ö–ù–û–ü–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ò –£–î–ê–õ–ï–ù–ò–Ø ---
        status_keyboard.row(
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞",
                callback_data=f"admin_edit_order_text_{order.id}"
            ),
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑",
                callback_data=f"admin_confirm_delete_order_{order.id}"  # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            )
        )

        # --- –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º/–ø–æ–∏—Å–∫—É" ---
        data = await state.get_data()
        current_page = data.get("current_page", 1)
        search_query = data.get("search_query")

        if search_query:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ FSM, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É
            encoded_query = urllib.parse.quote_plus(search_query)
            status_keyboard.row(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É",
                callback_data=f"admin_search_page:{current_page}:{encoded_query}"
            ))
        else:  # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º
            status_keyboard.row(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º",
                callback_data=f"admin_all_orders_page:{current_page}"
            ))

        await callback.message.edit_text(
            order_details_text,
            reply_markup=status_keyboard.as_markup(),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")

    await callback.answer()


@router.callback_query(F.data.startswith("admin_change_status_"), IsAdmin())
async def admin_change_order_status_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    parts = callback.data.split('_')
    if len(parts) < 5:
        await bot.answer_callback_query(callback.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞.",
                                        show_alert=True)  # <--- –ò—Å–ø–æ–ª—å–∑—É–µ–º bot
        return

    try:
        order_id = int(parts[3])
        new_status = parts[4]
    except (ValueError, IndexError):
        await bot.answer_callback_query(callback.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å.",
                                        show_alert=True)  # <--- –ò—Å–ø–æ–ª—å–∑—É–µ–º bot
        return

    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ID {order_id} –Ω–∞ '{new_status}'.")

    updated_order = await update_order_status(order_id, new_status)

    if updated_order:
        display_status = ORDER_STATUS_MAP.get(updated_order.status, updated_order.status)
        await bot.answer_callback_query(callback.id, text=f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{display_status}'!",
                                        show_alert=True)  # <--- –ò—Å–ø–æ–ª—å–∑—É–µ–º bot

        # --- –ù–û–í–´–ô –ü–û–î–•–û–î: –í–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è CallbackQuery, –∑–∞–Ω–æ–≤–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ---

        order = await get_order_by_id(order_id)  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        if not order:
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                        text="–û—à–∏–±–∫–∞: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
            return

        order_details_text = (
            f"{hbold('–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ ')}{hbold(str(order.id))}\n\n"
            f"{hbold('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:')} {hbold(order.username or 'N/A')} ({order.user_id})\n"
            f"{hbold('–°—Ç–∞—Ç—É—Å:')} {hbold(display_status)}\n"
            f"{hbold('–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:')}\n{hcode(order.order_text)}\n"
            f"{hbold('–§–ò–û:')} {order.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"{hbold('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:')} {order.delivery_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"{hbold('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:')} {order.payment_method or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"{hbold('–¢–µ–ª–µ—Ñ–æ–Ω:')} {order.contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"{hbold('–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:')} {order.delivery_notes or '–ù–µ—Ç'}\n"
            f"{hbold('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:')} {order.created_at.strftime('%d.%m.%Y %H:%M:%S')}\n"
        )

        status_keyboard = InlineKeyboardBuilder()
        for status_key, status_value in ORDER_STATUS_MAP.items():
            if status_key != order.status:
                status_keyboard.add(InlineKeyboardButton(
                    text=f"üîÑ {status_value}",
                    callback_data=f"admin_change_status_{order.id}_{status_key}"
                ))
        status_keyboard.adjust(2)

        status_keyboard.row(
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞",
                callback_data=f"admin_edit_order_text_{order.id}"
            ),
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑",
                callback_data=f"admin_confirm_delete_order_{order.id}"
            )
        )

        # –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º/–ø–æ–∏—Å–∫—É"
        data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        current_page = data.get("current_page", 1)
        search_query = data.get("search_query")

        if search_query:
            encoded_query = urllib.parse.quote_plus(search_query)
            status_keyboard.row(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É",
                callback_data=f"admin_search_page:{current_page}:{encoded_query}"
            ))
        else:
            status_keyboard.row(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º",
                callback_data=f"admin_all_orders_page:{current_page}"
            ))

        await bot.edit_message_text(  # <--- –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.edit_message_text
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=order_details_text,
            reply_markup=status_keyboard.as_markup(),
            parse_mode="HTML"
        )

    else:
        await bot.answer_callback_query(callback.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                        show_alert=True)
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                    text="–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")


@router.callback_query(F.data.startswith("admin_edit_order_text_"), IsAdmin())
async def admin_edit_order_text_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞.
    """
    order_id = int(callback.data.split("_")[4])
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞ ID {order_id}.")

    await state.update_data(
        editing_order_id=order_id,
        original_message_id=callback.message.message_id,
        original_chat_id=callback.message.chat.id,
        original_chat_instance=callback.chat_instance  # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ! –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π chat_instance
    )
    await state.set_state(AdminStates.waiting_for_order_text_edit)

    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"view_order_{order_id}")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(StateFilter(AdminStates.waiting_for_order_text_edit), IsAdmin())
async def admin_process_new_order_text(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞,
    —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    data = await state.get_data()
    order_id = data.get("editing_order_id")
    original_message_id = data.get("original_message_id")
    original_chat_id = data.get("original_chat_id")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not order_id or not original_message_id or not original_chat_id:
        logger.error(f"–ê–¥–º–∏–Ω {message.from_user.id}: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ FSM.")
        await message.answer(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel_back")]
            ]))
        await state.clear()
        return

    new_order_text = message.text.strip()
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–≤–µ–ª –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ID {order_id}.")

    updated_order = await update_order_text(order_id=order_id, new_text=new_order_text)

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

    if updated_order:
        await message.answer(f"–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", parse_mode="HTML")

        # --- –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–û–î–•–û–î –ë–ï–ó –§–ò–ö–®–ï–ù–ê ---

        # 1. –ó–∞–Ω–æ–≤–æ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order = await get_order_by_id(order_id)
        if not order:  # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞–∫–∞–∑ –ø—Ä–æ–ø–∞–ª –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
            await message.answer("–û—à–∏–±–∫–∞: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
            await _display_admin_main_menu(message, state)
            return

        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        display_status = ORDER_STATUS_MAP.get(order.status, order.status)
        order_details_text = (
            f"{hbold('–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ ')}{hbold(str(order.id))}\n\n"
            f"{hbold('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:')} {hbold(order.username or 'N/A')} ({order.user_id})\n"
            f"{hbold('–°—Ç–∞—Ç—É—Å:')} {hbold(display_status)}\n"
            f"{hbold('–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:')}\n{hcode(order.order_text)}\n"
            f"{hbold('–§–ò–û:')} {order.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"{hbold('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:')} {order.delivery_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"{hbold('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:')} {order.payment_method or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"{hbold('–¢–µ–ª–µ—Ñ–æ–Ω:')} {order.contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"{hbold('–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:')} {order.delivery_notes or '–ù–µ—Ç'}\n"
            f"{hbold('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:')} {order.created_at.strftime('%d.%m.%Y %H:%M:%S')}\n"
        )

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ç–æ–º—É, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ admin_view_order_details_callback)
        status_keyboard = InlineKeyboardBuilder()
        for status_key, status_value in ORDER_STATUS_MAP.items():
            if status_key != order.status:
                status_keyboard.add(InlineKeyboardButton(
                    text=f"üîÑ {status_value}",
                    callback_data=f"admin_change_status_{order.id}_{status_key}"
                ))
        status_keyboard.adjust(2)

        status_keyboard.row(
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞",
                callback_data=f"admin_edit_order_text_{order.id}"
            ),
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑",
                callback_data=f"admin_confirm_delete_order_{order_id}"
            )
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É/–∑–∞–∫–∞–∑–∞–º)
        state_data_for_navigation = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        current_page = state_data_for_navigation.get("current_page", 1)
        search_query = state_data_for_navigation.get("search_query")
        if search_query:
            encoded_query = urllib.parse.quote_plus(search_query)
            status_keyboard.row(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É",
                callback_data=f"admin_search_page:{current_page}:{encoded_query}"
            ))
        else:
            status_keyboard.row(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º",
                callback_data=f"admin_all_orders_page:{current_page}"
            ))

        # 4. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
        await bot.edit_message_text(
            chat_id=original_chat_id,
            message_id=original_message_id,
            text=order_details_text,
            reply_markup=status_keyboard.as_markup(),
            parse_mode="HTML"
        )
        # --- –ö–û–ù–ï–¶ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ì–û –ü–û–î–•–û–î–ê ---

    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
        await _display_admin_main_menu(message, state)


@router.callback_query(F.data.startswith("admin_confirm_delete_order_"), IsAdmin())
async def admin_confirm_delete_order_callback(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    """
    order_id = int(callback.data.split("_")[4])
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ID {order_id}.")

    await state.update_data(
        deleting_order_id=order_id,
        original_message_id_for_delete_confirm=callback.message.message_id,
        original_chat_id_for_delete_confirm=callback.message.chat.id,
        original_chat_instance_for_delete_confirm=callback.chat_instance  # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ!
    )

    confirm_keyboard = InlineKeyboardBuilder()
    confirm_keyboard.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_order_{order_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_order_{order_id}")
    )

    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order_id}?",
        reply_markup=confirm_keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_delete_order_"), IsAdmin())
async def admin_delete_order_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    order_id = int(callback.data.split("_")[3])
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ID {order_id}.")

    deleted = await delete_order(order_id=order_id)

    await state.clear()

    if deleted:
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                    text=f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", parse_mode="HTML")
        await bot.answer_callback_query(callback.id, text=f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
        data = await state.get_data()  # –≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ FSM, –Ω–æ –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        current_page = data.get("current_page", 1)
        search_query = data.get("search_query")

        await _display_orders_paginated(callback, state, current_page=current_page,
                                        is_search=bool(search_query))
    else:
        await bot.answer_callback_query(callback.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                        show_alert=True)

        # --- –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–û–î–•–û–î –ë–ï–ó –§–ò–ö–®–ï–ù–ê –î–õ–Ø –°–õ–£–ß–ê–Ø –ù–ï–£–î–ê–ß–ò ---
        data = await state.get_data()
        original_message_id = data.get("original_message_id_for_delete_confirm")
        original_chat_id = data.get("original_chat_id_for_delete_confirm")

        if original_message_id and original_chat_id:
            # –ó–∞–Ω–æ–≤–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ (–æ–Ω –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω)
            order = await get_order_by_id(order_id)
            if order:
                display_status = ORDER_STATUS_MAP.get(order.status, order.status)
                order_details_text = (
                    f"{hbold('–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ ')}{hbold(str(order.id))}\n\n"
                    f"{hbold('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:')} {hbold(order.username or 'N/A')} ({order.user_id})\n"
                    f"{hbold('–°—Ç–∞—Ç—É—Å:')} {hbold(display_status)}\n"
                    f"{hbold('–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:')}\n{hcode(order.order_text)}\n"
                    f"{hbold('–§–ò–û:')} {order.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"{hbold('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:')} {order.delivery_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"{hbold('–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:')} {order.payment_method or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"{hbold('–¢–µ–ª–µ—Ñ–æ–Ω:')} {order.contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"{hbold('–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:')} {order.delivery_notes or '–ù–µ—Ç'}\n"
                    f"{hbold('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:')} {order.created_at.strftime('%d.%m.%Y %H:%M:%S')}\n"
                )

                status_keyboard = InlineKeyboardBuilder()
                for status_key, status_value in ORDER_STATUS_MAP.items():
                    if status_key != order.status:
                        status_keyboard.add(InlineKeyboardButton(text=f"üîÑ {status_value}",
                                                                 callback_data=f"admin_change_status_{order.id}_{status_key}"))
                status_keyboard.adjust(2)
                status_keyboard.row(
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞",
                                         callback_data=f"admin_edit_order_text_{order.id}"),
                    InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑",
                                         callback_data=f"admin_confirm_delete_order_{order_id}")
                )
                state_data_for_navigation = await state.get_data()
                current_page = state_data_for_navigation.get("current_page", 1)
                search_query = state_data_for_navigation.get("search_query")
                if search_query:
                    encoded_query = urllib.parse.quote_plus(search_query)
                    status_keyboard.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É",
                                                             callback_data=f"admin_search_page:{current_page}:{encoded_query}"))
                else:
                    status_keyboard.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º",
                                                             callback_data=f"admin_all_orders_page:{current_page}"))

                await bot.edit_message_text(
                    chat_id=original_chat_id,
                    message_id=original_message_id,
                    text=order_details_text,
                    reply_markup=status_keyboard.as_markup(),
                    parse_mode="HTML"
                )
            else:
                await bot.edit_message_text(chat_id=original_chat_id, message_id=original_message_id,
                                            text="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                                            parse_mode="HTML")
                await _display_admin_main_menu(callback, state)
        else:
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                        text="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                                        parse_mode="HTML")
            await _display_admin_main_menu(callback, state)
