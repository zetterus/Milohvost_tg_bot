import logging
import urllib.parse

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from db import get_or_create_user
from .admin_filters import IsAdmin
from .admin_states import AdminStates
from .admin_utils import _display_orders_paginated, _display_admin_main_menu
from localization import get_localized_message

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "admin_find_orders", IsAdmin())
async def admin_find_orders_callback(
        callback: CallbackQuery,
        state: FSMContext,
        lang: str
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã üîç".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
    """
    user_id = callback.from_user.id
    logger.info(f"–ê–¥–º–∏–Ω {user_id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

    await get_or_create_user(
        user_id=user_id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )

    await callback.answer()

    await state.set_state(AdminStates.waiting_for_search_query)
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞ {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ {await state.get_state()}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    # –∏ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞.
    await callback.message.edit_text(
        text=get_localized_message("admin_prompt_search_query", lang),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_localized_message("admin_cancel_search_button", lang),
                                  callback_data="admin_panel_back")]
        ])
    )


@router.message(AdminStates.waiting_for_search_query, IsAdmin())
async def process_search_query(
        message: Message,
        state: FSMContext,
        lang: str
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–æ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    user_id = message.from_user.id
    search_query = message.text.strip()
    logger.info(f"–ê–¥–º–∏–Ω {user_id} –≤–≤–µ–ª –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{search_query}'.")

    if not search_query:
        await message.answer(get_localized_message("admin_prompt_search_query", lang), parse_mode=ParseMode.HTML)
        return

    await state.update_data(search_query=search_query)

    await _display_orders_paginated(message, state, current_page=1, lang=lang, is_search=True)


@router.callback_query(F.data.startswith("admin_search_page:"), IsAdmin())
async def admin_search_pagination_callback(
        callback: CallbackQuery,
        state: FSMContext,
        lang: str
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
    """
    user_id = callback.from_user.id
    try:
        parts = callback.data.split(":")
        page = int(parts[1])
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        search_query_encoded = parts[2] if len(parts) > 2 else ""
        search_query = urllib.parse.unquote_plus(search_query_encoded)
    except (ValueError, IndexError):
        logger.error(f"–ê–¥–º–∏–Ω {user_id}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞: {callback.data}")
        alert_text = get_localized_message("error_invalid_callback_data", lang)
        await callback.answer(alert_text, show_alert=True)
        return

    logger.info(f"–ê–¥–º–∏–Ω {user_id} –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ –Ω–∞ {page} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{search_query}'.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ FSM, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω —á–µ—Ä–µ–∑ callback
    if search_query:
        await state.update_data(search_query=search_query)

    await _display_orders_paginated(callback, state, current_page=page, lang=lang, is_search=True)

