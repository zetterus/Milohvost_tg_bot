from config import ADMIN_IDS

print("Admin router initialized")
# handlers/admin.py
import logging
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from datetime import datetime
import openpyxl
from io import BytesIO

from database import (
    get_all_orders, get_order_by_id, update_order_status,
    search_orders, update_order_text
)
from config import ADMIN_IDS
admin_router = Router()

class AdminOrderEditState(StatesGroup):
    waiting_for_new_text = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def format_order_details(order_data: tuple) -> str:
    if not order_data:
        return "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω."
    order_id, user_id, username, order_text, created_at, sent_at, received_at, status = order_data
    created_dt = datetime.fromisoformat(created_at).strftime('%d.%m.%Y %H:%M')
    sent_dt = datetime.fromisoformat(sent_at).strftime('%d.%m.%Y %H:%M') if sent_at else "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    received_dt = datetime.fromisoformat(received_at).strftime('%d.%m.%Y %H:%M') if received_at else "–ù–µ –ø–æ–ª—É—á–µ–Ω"
    return (
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ ‚Ññ{order_id}</b>\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {username} (ID: <code>{user_id}</code>)\n"
        f"üìù –¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞:\n{order_text}\n\n"
        f"‚è∞ –°–æ–∑–¥–∞–Ω: {created_dt}\n"
        f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {sent_dt}\n"
        f"‚úÖ –ü–æ–ª—É—á–µ–Ω: {received_dt}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: <b>{status}</b>"
    )

def get_admin_order_markup(order_id: int, current_status: str) -> types.InlineKeyboardMarkup:
    inline_keyboard = []
    all_statuses = ["–ù–æ–≤—ã–π", "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è", "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", "–û—Ç–º–µ–Ω–µ–Ω", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–í –ø—É—Ç–∏", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", "–ü–æ–ª—É—á–µ–Ω", "–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"]
    status_buttons_row = []
    for status in all_statuses:
        if status != current_status:
            status_buttons_row.append(
                types.InlineKeyboardButton(text=f"–°—Ç–∞—Ç—É—Å: {status}", callback_data=f"admin_status_{status}_{order_id}")
            )
            if len(status_buttons_row) == 2:
                inline_keyboard.append(status_buttons_row)
                status_buttons_row = []
    if status_buttons_row:
        inline_keyboard.append(status_buttons_row)

    inline_keyboard.append([
        types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"admin_edit_text_{order_id}"),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_back_to_list")
    ])
    return types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def format_orders_list(orders: list) -> str:
    if not orders:
        return "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç."
    response = "<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
    for order in orders:
        order_id, user_id, username, order_text, created_at, _, _, status = order
        truncated_text = (order_text[:40] + '...') if len(order_text) > 40 else order_text
        response += (f"üì¶ ‚Ññ{order_id} | {status} | –ö–ª–∏–µ–Ω—Ç: {username} | {truncated_text}\n"
                     f"  –°–æ–∑–¥–∞–Ω: {datetime.fromisoformat(created_at).strftime('%d.%m.%Y %H:%M')}\n\n")
    return response

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---



@admin_router.message(Command(commands=["admin"])) # –£–±—Ä–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä F.user.id.in_(ADMIN_IDS) –æ—Ç—Å—é–¥–∞
async def cmd_admin(message: types.Message):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    # --- –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ –æ—Ç –Ω–µ–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.from_user.id}")
        return # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
    # --------------------------------------------------------

    print(f"–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /admin –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç ID: {message.from_user.id}") # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    orders = get_all_orders()
    response = format_orders_list(orders)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", callback_data="admin_view_all_orders")],
        [types.InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="admin_export_excel")]
    ])
    await message.reply(response, reply_markup=markup, parse_mode='HTML')


@admin_router.message(Command(commands=["admin_search"])) # –¢–æ –∂–µ —Å–∞–º–æ–µ –∏ –∑–¥–µ—Å—å
async def cmd_admin_search(message: types.Message):
    """
    –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ ID –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_search <–∑–∞–ø—Ä–æ—Å>
    """
    # --- –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ –æ—Ç –Ω–µ–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.from_user.id}")
        return # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
    # --------------------------------------------------------

    print(f"–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /admin_search –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç ID: {message.from_user.id}") # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    query_parts = message.text.split('/admin_search ', 1)
    if len(query_parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_search <ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞>")
        return

    search_query = query_parts[1].strip()
    orders = search_orders(search_query)

    response = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{search_query}':</b>\n\n" + format_orders_list(orders)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", callback_data="admin_view_all_orders")]
    ])
    await message.reply(response, reply_markup=markup, parse_mode='HTML')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Callback Query (Inline-–∫–Ω–æ–ø–æ–∫) (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

@admin_router.callback_query(F.data == "admin_view_all_orders", F.from_user.id.in_(ADMIN_IDS))
async def callback_view_all_orders(callback: types.CallbackQuery):
    orders = get_all_orders()
    response = format_orders_list(orders)
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="admin_export_excel")]
    ])
    await callback.message.edit_text(response, reply_markup=markup, parse_mode='HTML')
    await callback.answer()


@admin_router.callback_query(F.data.startswith("admin_view_order_") & F.from_user.id.in_(ADMIN_IDS))
async def callback_view_order_details(callback: types.CallbackQuery):
    order_id = int(callback.data.split('_')[-1])
    order_data = get_order_by_id(order_id)
    if not order_data:
        await callback.message.edit_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    formatted_text = format_order_details(order_data)
    current_status = order_data[7]
    markup = get_admin_order_markup(order_id, current_status)
    await callback.message.edit_text(formatted_text, reply_markup=markup, parse_mode='HTML')
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_status_") & F.from_user.id.in_(ADMIN_IDS))
async def callback_change_order_status(callback: types.CallbackQuery):
    parts = callback.data.split('_')
    new_status = parts[2]
    order_id = int(parts[3])
    update_order_status(order_id, new_status)
    order_data = get_order_by_id(order_id)
    if order_data:
        formatted_text = format_order_details(order_data)
        current_status = order_data[7]
        markup = get_admin_order_markup(order_id, current_status)
        await callback.message.edit_text(formatted_text, reply_markup=markup, parse_mode='HTML')
        await callback.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
    else:
        await callback.message.edit_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")

@admin_router.callback_query(F.data.startswith("admin_edit_text_") & F.from_user.id.in_(ADMIN_IDS))
async def callback_edit_order_text(callback: types.CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split('_')[-1])
    order_data = get_order_by_id(order_id)
    if not order_data:
        await callback.message.edit_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    await state.set_state(AdminOrderEditState.waiting_for_new_text)
    await state.update_data(order_id=order_id, original_message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}:\n\n–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n`{order_data[3]}`",
                                     parse_mode='Markdown')
    await callback.answer()

@admin_router.message(AdminOrderEditState.waiting_for_new_text, F.user.id.in_(ADMIN_IDS))
async def process_new_order_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    original_message_id = data.get('original_message_id')
    chat_id = data.get('chat_id')
    new_text = message.text
    update_order_text(order_id, new_text)
    order_data = get_order_by_id(order_id)
    await state.clear()
    if order_data:
        formatted_text = format_order_details(order_data)
        current_status = order_data[7]
        markup = get_admin_order_markup(order_id, current_status)
        try:
            await message.bot.edit_message_text(
                chat_id=chat_id,
                message_id=original_message_id,
                text=formatted_text,
                reply_markup=markup,
                parse_mode='HTML'
            )
            await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {original_message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            await message.answer(formatted_text, reply_markup=markup, parse_mode='HTML')
            await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
    else:
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.")

@admin_router.callback_query(F.data == "admin_export_excel", F.from_user.id.in_(ADMIN_IDS))
async def callback_export_excel(callback: types.CallbackQuery):
    orders = get_all_orders()
    if not orders:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", show_alert=True)
        return
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = "–ó–∞–∫–∞–∑—ã"
    headers = ["ID", "User ID", "Username", "Order Text", "Created At", "Sent At", "Received At", "Status"]
    sheet.append(headers)
    for order in orders:
        formatted_order = list(order)
        if formatted_order[4]:
            formatted_order[4] = datetime.fromisoformat(formatted_order[4]).strftime('%Y-%m-%d %H:%M:%S')
        if formatted_order[5]:
            formatted_order[5] = datetime.fromisoformat(formatted_order[5]).strftime('%Y-%m-%d %H:%M:%S')
        if formatted_order[6]:
            formatted_order[6] = datetime.fromisoformat(formatted_order[6]).strftime('%Y-%m-%d %H:%M:%S')
        sheet.append(formatted_order)
    excel_file = BytesIO()
    workbook.save(excel_file)
    excel_file.seek(0)
    await callback.message.answer_document(
        types.BufferedInputFile(excel_file.getvalue(), filename=f"orders_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"),
        caption="–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel."
    )
    await callback.answer("–§–∞–π–ª Excel —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@admin_router.callback_query(F.data == "admin_back_to_list", F.from_user.id.in_(ADMIN_IDS))
async def callback_back_to_list(callback: types.CallbackQuery):
    orders = get_all_orders()
    response = format_orders_list(orders)
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", callback_data="admin_view_all_orders")],
        [types.InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="admin_export_excel")]
    ])
    await callback.message.edit_text(response, reply_markup=markup, parse_mode='HTML')
    await callback.answer()