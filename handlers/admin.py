# handlers/admin.py
import logging
from aiogram import types, Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import openpyxl
from io import BytesIO

from aiogram.filters import Command
from config import ADMIN_IDS
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é delete_order
from database import get_all_orders, get_order_by_id, update_order_status, update_order_text, search_orders, \
    delete_order

admin_router = Router()


# –î–æ–±–∞–≤–ª—è–µ–º FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
class AdminPanelState(StatesGroup):
    viewing_orders = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤


class AdminOrderEditState(StatesGroup):
    waiting_for_new_text = State()


# –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å —ç–º–æ–¥–∑–∏ (–ø–µ—Ä–µ–Ω–µ—Å—ë–Ω —Å—é–¥–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
all_statuses_with_emojis = {
    "–ù–æ–≤—ã–π": "üÜï –ù–æ–≤—ã–π",
    "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è": "‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
    "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã": "üí∞ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
    "–û—Ç–º–µ–Ω–µ–Ω": "‚ùå –û—Ç–º–µ–Ω–µ–Ω",
    "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω": "‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω",
    "–í –ø—É—Ç–∏": "üöö –í –ø—É—Ç–∏",
    "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ": "‚úÖ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
    "–ü–æ–ª—É—á–µ–Ω": "üëç –ü–æ–ª—É—á–µ–Ω",
    "–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π": "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"
}

ORDERS_PER_PAGE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def format_orders_list(orders):
    if not orders:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."
    response = "<b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
    for order in orders:
        order_id, user_id, username, order_text, created_at, sent_at, received_at, status, *delivery_info = order  # –¢–µ–ø–µ—Ä—å –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ–ª—è
        truncated_text = (order_text[:50] + '...') if len(order_text) > 50 else order_text
        response += (f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n"
                     f"   –û—Ç: {username}\n"
                     f"   –¢–µ–∫—Å—Ç: {truncated_text}\n"
                     f"   –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n")
    return response


# –ù–û–í–ê–Ø: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
async def get_paginated_orders_markup(orders, current_page):
    start_index = current_page * ORDERS_PER_PAGE
    end_index = start_index + ORDERS_PER_PAGE
    page_orders = orders[start_index:end_index]

    inline_keyboard = []

    if not page_orders and current_page == 0:
        inline_keyboard.append(
            [types.InlineKeyboardButton(text="–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="no_orders")])
    elif not page_orders and current_page > 0:
        inline_keyboard.append([types.InlineKeyboardButton(text="–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞", callback_data="end_of_list")])
    else:
        for order in page_orders:
            order_id, user_id, username, order_text, *rest = order
            truncated_text = (order_text[:30] + '...') if len(order_text) > 30 else order_text
            # –ö–Ω–æ–ø–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            inline_keyboard.append([types.InlineKeyboardButton(
                text=f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order_id} | {username} | {truncated_text}",
                callback_data=f"admin_view_order_{order_id}"
            )])
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥ –∫–∞–∂–¥—ã–º –∑–∞–∫–∞–∑–æ–º
            inline_keyboard.append([
                types.InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"admin_change_status_{order_id}"),
                types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_edit_text_{order_id}"),
                # –£–∫–∞–∑—ã–≤–∞–µ–º order_id —è–≤–Ω–æ
                types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_order_confirm_{order_id}")
            ])

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"admin_page_{current_page - 1}"))
    if end_index < len(orders):
        pagination_buttons.append(
            types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"admin_page_{current_page + 1}"))

    if pagination_buttons:
        inline_keyboard.append(pagination_buttons)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
    inline_keyboard.append([types.InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="admin_export_excel")])

    return types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
@admin_router.callback_query(F.data.startswith("admin_view_order_"), F.from_user.id.in_(ADMIN_IDS))
async def admin_view_order_callback(callback_query: types.CallbackQuery):
    print(f"Callback 'admin_view_order_' –ø–æ–ª—É—á–µ–Ω –æ—Ç –∞–¥–º–∏–Ω–∞ ID: {callback_query.from_user.id}")
    order_id = int(callback_query.data.split('_')[3])
    # –ü–µ—Ä–µ–¥–∞–µ–º callback_query.bot
    await send_order_details_to_admin(callback_query.bot, callback_query.message.chat.id, order_id, callback_query.id)


# –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@admin_router.callback_query(F.data.startswith("admin_change_status_"), F.from_user.id.in_(ADMIN_IDS))
async def admin_prompt_change_status(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = int(callback_query.data.split('_')[3])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ FSM –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await state.update_data(current_order_id_for_status=order_id)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    status_buttons = []
    for status_key, status_label_with_emoji in all_statuses_with_emojis.items():
        status_buttons.append(
            types.InlineKeyboardButton(
                text=status_label_with_emoji,
                callback_data=f"admin_set_status_{status_key}_{order_id}"  # –¢–µ–ø–µ—Ä—å –∫–æ–ª–±—ç–∫ data –≤–∫–ª—é—á–∞–µ—Ç order_id
            )
        )
    keyboard_rows = [status_buttons[i:i + 2] for i in range(0, len(status_buttons), 2)]
    keyboard_rows.append(
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back_to_current_page")])  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã

    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await callback_query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}:", reply_markup=markup)
    await callback_query.answer()


# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
@admin_router.callback_query(F.data.startswith("admin_set_status_"), F.from_user.id.in_(ADMIN_IDS))
async def admin_set_status_callback(callback_query: types.CallbackQuery, state: FSMContext):
    parts = callback_query.data.split('_')
    new_status = parts[3]  # –° 3, —Ç.–∫. "admin_set_status_<status_key>_<order_id>"
    order_id = int(parts[4])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    update_order_status(order_id, new_status)
    await callback_query.answer(
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{all_statuses_with_emojis.get(new_status, new_status)}'",
        show_alert=False)

    # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è" ---
    if new_status == "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è":
        order = get_order_by_id(order_id)
        if order:
            user_id = order[1]  # user_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–º –ø–æ–ª–µ (–∏–Ω–¥–µ–∫—Å 1)
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_query.bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                await callback_query.bot.send_message(user_id,
                                                      f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} —Å–µ–π—á–∞—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
                logging.info(
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Å—Ç–∞—Ç—É—Å–µ '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è' –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
    # -------------------------------------------------------------------

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    user_data = await state.get_data()
    current_page = user_data.get('current_page', 0)
    await show_paginated_orders(callback_query.message, state, current_page, edit_message=True)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫


# –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
@admin_router.callback_query(F.data.startswith("admin_edit_text_"), F.from_user.id.in_(ADMIN_IDS))
async def admin_edit_text_callback(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = int(callback_query.data.split('_')[3])  # –ò–∑–≤–ª–µ–∫–∞–µ–º order_id
    await state.update_data(order_id=order_id)
    await callback_query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞.")
    await state.set_state(AdminOrderEditState.waiting_for_new_text)
    await callback_query.answer()


# –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@admin_router.callback_query(F.data.startswith("admin_delete_order_confirm_"), F.from_user.id.in_(ADMIN_IDS))
async def admin_delete_order_confirm(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split('_')[4])  # order_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 5-–π —á–∞—Å—Ç–∏
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_order_execute_{order_id}")],
        [types.InlineKeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="admin_back_to_current_page")]
    ])
    await callback_query.message.edit_text(f"–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order_id}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
                                           reply_markup=markup)
    await callback_query.answer()


# –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@admin_router.callback_query(F.data.startswith("admin_delete_order_execute_"), F.from_user.id.in_(ADMIN_IDS))
async def admin_delete_order_execute(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = int(callback_query.data.split('_')[4])  # order_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 5-–π —á–∞—Å—Ç–∏

    delete_order(order_id)  # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
    await callback_query.answer(f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} —É–¥–∞–ª–µ–Ω.", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    user_data = await state.get_data()
    current_page = user_data.get('current_page', 0)
    await show_paginated_orders(callback_query.message, state, current_page, edit_message=True)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫


@admin_router.message(AdminOrderEditState.waiting_for_new_text, F.from_user.id.in_(ADMIN_IDS))
async def process_new_order_text(message: types.Message, state: FSMContext):
    print(f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω –æ—Ç –∞–¥–º–∏–Ω–∞ ID: {message.from_user.id}")
    data = await state.get_data()
    order_id = data.get('order_id')
    new_text = message.text

    if order_id:
        update_order_text(order_id, new_text)
        await message.reply(f"–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")

        await send_order_details_to_admin(message.bot, message.chat.id, order_id)
    else:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

    await state.clear()
    # –ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    await show_paginated_orders(message, state, current_page=0)  # –ò–ª–∏ –Ω–∞ —Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—à–ª–∏


@admin_router.callback_query(F.data == "admin_export_excel", F.from_user.id.in_(ADMIN_IDS))
async def admin_export_excel_callback(callback_query: types.CallbackQuery):
    print(f"Callback 'admin_export_excel' –ø–æ–ª—É—á–µ–Ω –æ—Ç –∞–¥–º–∏–Ω–∞ ID: {callback_query.from_user.id}")
    orders = get_all_orders()
    if not orders:
        await callback_query.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", show_alert=True)
        return

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–ó–∞–∫–∞–∑—ã"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ (—Ç–µ–ø–µ—Ä—å —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏)
    headers = ["ID –ó–∞–∫–∞–∑–∞", "ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–¢–µ–∫—Å—Ç –ó–∞–∫–∞–∑–∞", "–î–∞—Ç–∞ –°–æ–∑–¥–∞–Ω–∏—è",
               "–î–∞—Ç–∞ –û—Ç–ø—Ä–∞–≤–∫–∏", "–î–∞—Ç–∞ –ü–æ–ª—É—á–µ–Ω–∏—è", "–°—Ç–∞—Ç—É—Å",
               "–§–ò–û", "–ê–¥—Ä–µ—Å –î–æ—Å—Ç–∞–≤–∫–∏", "–ú–µ—Ç–æ–¥ –û–ø–ª–∞—Ç—ã", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"]
    ws.append(headers)

    # –î–∞–Ω–Ω—ã–µ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π)
    for order in orders:
        formatted_order = list(order)
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ None
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º
        date_indices = [4, 5, 6]  # created_at, sent_at, received_at
        for idx in date_indices:
            if len(formatted_order) > idx and formatted_order[idx]:
                try:
                    formatted_order[idx] = datetime.fromisoformat(formatted_order[idx]).strftime('%Y-%m-%d %H:%M')
                except ValueError:
                    formatted_order[idx] = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        ws.append(formatted_order)

    excel_file = BytesIO()
    wb.save(excel_file)
    excel_file.seek(0)

    await callback_query.message.answer_document(
        types.BufferedInputFile(excel_file.getvalue(), filename="orders.xlsx"),
        caption="–í–æ—Ç —Ç–≤–æ–∏ –∑–∞–∫–∞–∑—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel."
    )
    await callback_query.answer("–§–∞–π–ª Excel –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")


# –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@admin_router.callback_query(F.data.startswith("admin_page_"), F.from_user.id.in_(ADMIN_IDS))
async def admin_paginate_orders(callback_query: types.CallbackQuery, state: FSMContext):
    current_page = int(callback_query.data.split('_')[2])
    await show_paginated_orders(callback_query.message, state, current_page, edit_message=True)
    await callback_query.answer()


# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
@admin_router.callback_query(F.data == "admin_back_to_list", F.from_user.id.in_(ADMIN_IDS))
async def admin_back_to_list_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—à–ª–∏, –∏–ª–∏ –Ω–∞ –ø–µ—Ä–≤—É—é
    user_data = await state.get_data()
    current_page = user_data.get('current_page', 0)
    await show_paginated_orders(callback_query.message, state, current_page, edit_message=True)
    await callback_query.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---

@admin_router.message(Command(commands=["admin"]), F.from_user.id.in_(ADMIN_IDS))
async def cmd_admin(message: types.Message, state: FSMContext):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    –í—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    print(f"!!! cmd_admin: –ö–æ–º–∞–Ω–¥–∞ /admin –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç ID: {message.from_user.id}")
    print(f"!!! cmd_admin: ADMIN_IDS –∏–∑ config.py: {ADMIN_IDS}")
    print(f"!!! cmd_admin: –ü—Ä–æ–≤–µ—Ä—è–µ–º: {message.from_user.id} in ADMIN_IDS -> {message.from_user.id in ADMIN_IDS}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤
    await state.set_state(AdminPanelState.viewing_orders)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
    await show_paginated_orders(message, state, current_page=0)


@admin_router.message(Command(commands=["admin_search"]), F.from_user.id.in_(ADMIN_IDS))
async def cmd_admin_search(message: types.Message):
    print(f"!!! cmd_admin_search: –ö–æ–º–∞–Ω–¥–∞ /admin_search –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç ID: {message.from_user.id}")
    print(f"!!! cmd_admin_search: ADMIN_IDS –∏–∑ config.py: {ADMIN_IDS}")
    print(
        f"!!! cmd_admin_search: –ü—Ä–æ–≤–µ—Ä—è–µ–º: {message.from_user.id} in ADMIN_IDS -> {message.from_user.id in ADMIN_IDS}")

    query_parts = message.text.split('/admin_search ', 1)
    if len(query_parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_search <ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞>")
        return

    search_query = query_parts[1].strip()
    orders = search_orders(search_query)

    response = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{search_query}':</b>\n\n" + format_orders_list(orders)

    # –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–±–æ–ª—å—à–æ–π.
    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–Ω–æ–≥–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ —Å—é–¥–∞.
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", callback_data="admin_view_all_orders")]
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    ])
    await message.reply(response, reply_markup=markup, parse_mode='HTML')


# –ù–û–í–ê–Ø: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def show_paginated_orders(message: types.Message, state: FSMContext, current_page: int,
                                edit_message: bool = False):
    orders = get_all_orders()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    await state.update_data(current_page=current_page)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ FSM

    start_index = current_page * ORDERS_PER_PAGE
    end_index = start_index + ORDERS_PER_PAGE
    page_orders = orders[start_index:end_index]

    if not page_orders:
        if current_page > 0:
            response_text = "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤."
        else:
            response_text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç."
    else:
        response_text = f"<b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{((len(orders) - 1) // ORDERS_PER_PAGE) + 1 if len(orders) > 0 else 1}):</b>\n\n"
        for order in page_orders:
            order_id, _, username, order_text, created_at, *rest = order
            truncated_text = (order_text[:40] + '...') if len(order_text) > 40 else order_text
            response_text += f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç {username}: {truncated_text}\n"

    markup = await get_paginated_orders_markup(orders, current_page)

    if edit_message and message.from_user.id in ADMIN_IDS:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏
        try:
            await message.edit_text(response_text, reply_markup=markup, parse_mode='HTML')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.answer(response_text, reply_markup=markup, parse_mode='HTML')
    else:
        await message.answer(response_text, reply_markup=markup, parse_mode='HTML')


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ ---
async def send_order_details_to_admin(bot: Bot, chat_id: int, order_id: int, callback_query_id: str = None):
    # –¢–µ–ø–µ—Ä—å 'bot' —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º _last_message_id_for_edit –≤ –æ–±—ä–µ–∫—Ç bot, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ
    if not hasattr(bot, '_last_message_id_for_edit'):
        bot._last_message_id_for_edit = {}

    order = get_order_by_id(order_id)
    if not order:
        if callback_query_id:
            await bot.answer_callback_query(callback_query_id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await bot.send_message(chat_id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    order_id, user_id, username, order_text, created_at_iso, sent_at_iso, received_at_iso, status, \
        full_name, delivery_address, payment_method, contact_phone, delivery_notes = order

    created_at_dt = datetime.fromisoformat(created_at_iso)
    formatted_created_at = created_at_dt.strftime('%d.%m.%Y %H:%M')

    formatted_sent_at = datetime.fromisoformat(sent_at_iso).strftime('%d.%m.%Y %H:%M') if sent_at_iso else "N/A"
    formatted_received_at = datetime.fromisoformat(received_at_iso).strftime(
        '%d.%m.%Y %H:%M') if received_at_iso else "N/A"

    admin_message = (f"üìù <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}</b>\n\n"
                     f"üë§ –û—Ç: {username} (ID: <code>{user_id}</code>)\n"
                     f"üìù –¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞: {order_text}\n"
                     f"‚è∞ –°–æ–∑–¥–∞–Ω: {formatted_created_at}\n"
                     f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {formatted_sent_at}\n"
                     f"‚úÖ –ü–æ–ª—É—á–µ–Ω: {formatted_received_at}\n"
                     f"üìç –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n"
                     f"--- –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ ---\n"
                     f"–§–ò–û: {full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                     f"–ê–¥—Ä–µ—Å: {delivery_address or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                     f"–û–ø–ª–∞—Ç–∞: {payment_method or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                     f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                     f"–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {delivery_notes or '–ù–µ—Ç'}")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    status_buttons_list = []
    for status_key, status_label_with_emoji in all_statuses_with_emojis.items():
        status_buttons_list.append(
            types.InlineKeyboardButton(
                text=status_label_with_emoji,
                callback_data=f"admin_set_status_{status_key}_{order_id}"
            )
        )
    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥—ã –ø–æ 2
    keyboard_rows = [status_buttons_list[i:i + 2] for i in range(0, len(status_buttons_list), 2)]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    keyboard_rows.append([
        types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"admin_edit_text_{order_id}"),
        types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_delete_order_confirm_{order_id}")
    ])
    keyboard_rows.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_back_to_list")])

    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    try:
        if callback_query_id:
            await bot.edit_message_text(  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π 'bot'
                chat_id=chat_id,
                message_id=bot._last_message_id_for_edit.get(chat_id),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π 'bot'
                text=admin_message,
                reply_markup=markup,
                parse_mode='HTML'
            )
            await bot.answer_callback_query(callback_query_id)
        else:
            sent_message = await bot.send_message(  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π 'bot'
                chat_id,
                admin_message,
                reply_markup=markup,
                parse_mode='HTML'
            )
            bot._last_message_id_for_edit[chat_id] = sent_message.message_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π 'bot'
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.")
